{
  "version": 3,
  "sources": ["../../../../.yarn/cache/@remix-run-router-npm-1.1.0-49c6baa755-18e28668c3.zip/node_modules/@remix-run/router/history.ts", "../../../../.yarn/cache/@remix-run-router-npm-1.1.0-49c6baa755-18e28668c3.zip/node_modules/@remix-run/router/utils.ts", "../../../../.yarn/cache/@remix-run-router-npm-1.1.0-49c6baa755-18e28668c3.zip/node_modules/@remix-run/router/router.ts", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/browser.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/components.js", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/use-sync-external-store-shim/index.ts", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/context.ts", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/hooks.tsx", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/lib/components.tsx", "../../../../.yarn/__virtual__/react-router-virtual-a133120fc5/0/cache/react-router-npm-6.5.0-11bbffd58d-f1f43361e3.zip/node_modules/react-router/index.ts", "../../../../.yarn/__virtual__/react-router-dom-virtual-fb003208d4/0/cache/react-router-dom-npm-6.5.0-6cfc869c2d-b428d3cfd5.zip/node_modules/react-router-dom/dom.ts", "../../../../.yarn/__virtual__/react-router-dom-virtual-fb003208d4/0/cache/react-router-dom-npm-6.5.0-6cfc869c2d-b428d3cfd5.zip/node_modules/react-router-dom/index.tsx", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/errorBoundaries.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/invariant.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/routeModules.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/links.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/markup.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/routes.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/data.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/routeMatching.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/transition.js", "../../../../.yarn/__virtual__/@remix-run-react-virtual-79c41878e4/0/cache/@remix-run-react-npm-1.9.0-a9d7d1ce24-f09510e970.zip/node_modules/@remix-run/react/dist/esm/scroll-restoration.js", "../../../../app/utils/context.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return path\n    .replace(/^:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return `/${params[key]!}`;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true ||\n      (submission != null && isMutationMethod(submission.formMethod))\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isMutationMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createBrowserHistory } from '@remix-run/router';\nimport * as React from 'react';\nimport { RemixEntry } from './components.js';\n\n/**\n * The entry point for a Remix app when it is rendered in the browser (in\n * `app/entry.client.js`). This component is used by React to hydrate the HTML\n * that was received from the server.\n */\nfunction RemixBrowser(_props) {\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, dispatch] = React.useReducer((_, update) => update, {\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(dispatch), [history]);\n  let entryContext = window.__remixContext;\n  entryContext.manifest = window.__remixManifest;\n  entryContext.routeModules = window.__remixRouteModules;\n  // In the browser, we don't need this because a) in the case of loader\n  // errors we already know the order and b) in the case of render errors\n  // React knows the order and handles error boundaries normally.\n  entryContext.appState.trackBoundaries = false;\n  entryContext.appState.trackCatchBoundaries = false;\n  return /*#__PURE__*/React.createElement(RemixEntry, {\n    context: entryContext,\n    action: state.action,\n    location: state.location,\n    navigator: history\n  });\n}\n\nexport { RemixBrowser };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { Router, useRoutes, useHref, NavLink as NavLink$1, Link as Link$1, useLocation, createPath, useResolvedPath, useNavigate } from 'react-router-dom';\nimport { RemixErrorBoundary, RemixRootDefaultErrorBoundary, RemixCatchBoundary, RemixRootDefaultCatchBoundary } from './errorBoundaries.js';\nimport invariant from './invariant.js';\nimport { getLinksForMatches, isPageLinkDescriptor, getNewMatchesForLinks, getDataLinkHrefs, getModuleLinkHrefs, getStylesheetPrefetchLinks } from './links.js';\nimport { createHtml } from './markup.js';\nimport { createClientRoutes } from './routes.js';\nimport { matchClientRoutes } from './routeMatching.js';\nimport { createTransitionManager } from './transition.js';\n\nconst RemixEntryContext = /*#__PURE__*/React.createContext(undefined);\nfunction useRemixEntryContext() {\n  let context = React.useContext(RemixEntryContext);\n  invariant(context, \"You must render this element inside a <Remix> element\");\n  return context;\n}\nfunction RemixEntry({\n  context: entryContext,\n  action,\n  location: historyLocation,\n  navigator: _navigator,\n  static: staticProp = false\n}) {\n  let {\n    manifest,\n    routeData: documentLoaderData,\n    actionData: documentActionData,\n    routeModules,\n    serverHandoffString,\n    appState: entryComponentDidCatchEmulator\n  } = entryContext;\n  let clientRoutes = React.useMemo(() => createClientRoutes(manifest.routes, routeModules, RemixRoute), [manifest, routeModules]);\n  let [clientState, setClientState] = React.useState(entryComponentDidCatchEmulator);\n  let [transitionManager] = React.useState(() => {\n    return createTransitionManager({\n      routes: clientRoutes,\n      actionData: documentActionData,\n      loaderData: documentLoaderData,\n      location: historyLocation,\n      catch: entryComponentDidCatchEmulator.catch,\n      catchBoundaryId: entryComponentDidCatchEmulator.catchBoundaryRouteId,\n      onRedirect: _navigator.replace\n    });\n  });\n  React.useEffect(() => {\n    let subscriber = state => {\n      setClientState({\n        catch: state.catch,\n        error: state.error,\n        catchBoundaryRouteId: state.catchBoundaryId,\n        loaderBoundaryRouteId: state.errorBoundaryId,\n        renderBoundaryRouteId: null,\n        trackBoundaries: false,\n        trackCatchBoundaries: false\n      });\n    };\n    return transitionManager.subscribe(subscriber);\n  }, [transitionManager]);\n\n  // Ensures pushes interrupting pending navigations use replace\n  // TODO: Move this to React Router\n  let navigator = React.useMemo(() => {\n    let push = (to, state) => {\n      return transitionManager.getState().transition.state !== \"idle\" ? _navigator.replace(to, state) : _navigator.push(to, state);\n    };\n    return {\n      ..._navigator,\n      push\n    };\n  }, [_navigator, transitionManager]);\n  let {\n    location,\n    matches,\n    loaderData,\n    actionData\n  } = transitionManager.getState();\n\n  // Send new location to the transition manager\n  React.useEffect(() => {\n    let {\n      location\n    } = transitionManager.getState();\n    if (historyLocation === location) return;\n    transitionManager.send({\n      type: \"navigation\",\n      location: historyLocation,\n      submission: consumeNextNavigationSubmission(),\n      action\n    });\n  }, [transitionManager, historyLocation, action]);\n\n  // If we tried to render and failed, and the app threw before rendering any\n  // routes, get the error and pass it to the ErrorBoundary to emulate\n  // `componentDidCatch`\n  let ssrErrorBeforeRoutesRendered = clientState.error && clientState.renderBoundaryRouteId === null && clientState.loaderBoundaryRouteId === null ? deserializeError(clientState.error) : undefined;\n  let ssrCatchBeforeRoutesRendered = clientState.catch && clientState.catchBoundaryRouteId === null ? clientState.catch : undefined;\n  return /*#__PURE__*/React.createElement(RemixEntryContext.Provider, {\n    value: {\n      matches,\n      manifest,\n      appState: clientState,\n      routeModules,\n      serverHandoffString,\n      clientRoutes,\n      routeData: loaderData,\n      actionData,\n      transitionManager,\n      future: entryContext.future\n    }\n  }, /*#__PURE__*/React.createElement(RemixErrorBoundary, {\n    location: location,\n    component: RemixRootDefaultErrorBoundary,\n    error: ssrErrorBeforeRoutesRendered\n  }, /*#__PURE__*/React.createElement(RemixCatchBoundary, {\n    location: location,\n    component: RemixRootDefaultCatchBoundary,\n    catch: ssrCatchBeforeRoutesRendered\n  }, /*#__PURE__*/React.createElement(Router, {\n    navigationType: action,\n    location: location,\n    navigator: navigator,\n    static: staticProp\n  }, /*#__PURE__*/React.createElement(Routes, null)))));\n}\nfunction deserializeError(data) {\n  let error = new Error(data.message);\n  error.stack = data.stack;\n  return error;\n}\nfunction Routes() {\n  // TODO: Add `renderMatches` function to RR that we can use and then we don't\n  // need this component, we can just `renderMatches` from RemixEntry\n  let {\n    clientRoutes\n  } = useRemixEntryContext();\n  // fallback to the root if we don't have a match\n\n  // TODO: clientRoutes currently errors here since RR 6.4 dropped `signal` as a\n  // loader argument.  But since we're just using <Router> we aren't using any\n  // loaders in RR so this isn't an issue.  We'll get these typings straightened\n  // out as part of the rendering work.\n  // @ts-expect-error\n  let element = useRoutes(clientRoutes) || clientRoutes[0].element;\n  return element;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixRoute\n\nconst RemixRouteContext = /*#__PURE__*/React.createContext(undefined);\nfunction useRemixRouteContext() {\n  let context = React.useContext(RemixRouteContext);\n  invariant(context, \"You must render this element in a remix route element\");\n  return context;\n}\nfunction DefaultRouteComponent({\n  id\n}) {\n  throw new Error(`Route \"${id}\" has no component! Please go add a \\`default\\` export in the route module file.\\n` + \"If you were trying to navigate or submit to a resource route, use `<a>` instead of `<Link>` or `<Form reloadDocument>`.\");\n}\nfunction RemixRoute({\n  id\n}) {\n  let location = useLocation();\n  let {\n    routeData,\n    routeModules,\n    appState\n  } = useRemixEntryContext();\n\n  // This checks prevent cryptic error messages such as: 'Cannot read properties of undefined (reading 'root')'\n  invariant(routeData, \"Cannot initialize 'routeData'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let data = routeData[id];\n  let {\n    default: Component,\n    CatchBoundary,\n    ErrorBoundary\n  } = routeModules[id];\n  let element = Component ? /*#__PURE__*/React.createElement(Component, null) : /*#__PURE__*/React.createElement(DefaultRouteComponent, {\n    id: id\n  });\n  let context = {\n    data,\n    id\n  };\n  if (CatchBoundary) {\n    // If we tried to render and failed, and this route threw the error, find it\n    // and pass it to the ErrorBoundary to emulate `componentDidCatch`\n    let maybeServerCaught = appState.catch && appState.catchBoundaryRouteId === id ? appState.catch : undefined;\n\n    // This needs to run after we check for the error from a previous render,\n    // otherwise we will incorrectly render this boundary for a loader error\n    // deeper in the tree.\n    if (appState.trackCatchBoundaries) {\n      appState.catchBoundaryRouteId = id;\n    }\n    context = maybeServerCaught ? {\n      id,\n      get data() {\n        console.error(\"You cannot `useLoaderData` in a catch boundary.\");\n        return undefined;\n      }\n    } : {\n      id,\n      data\n    };\n    element = /*#__PURE__*/React.createElement(RemixCatchBoundary, {\n      location: location,\n      component: CatchBoundary,\n      catch: maybeServerCaught\n    }, element);\n  }\n\n  // Only wrap in error boundary if the route defined one, otherwise let the\n  // error bubble to the parent boundary. We could default to using error\n  // boundaries around every route, but now if the app doesn't want users\n  // seeing the default Remix ErrorBoundary component, they *must* define an\n  // error boundary for *every* route and that would be annoying. Might as\n  // well make it required at that point.\n  //\n  // By conditionally wrapping like this, we allow apps to define a top level\n  // ErrorBoundary component and be done with it. Then, if they want to, they\n  // can add more specific boundaries by exporting ErrorBoundary components\n  // for whichever routes they please.\n  //\n  // NOTE: this kind of logic will move into React Router\n\n  if (ErrorBoundary) {\n    // If we tried to render and failed, and this route threw the error, find it\n    // and pass it to the ErrorBoundary to emulate `componentDidCatch`\n    let maybeServerRenderError = appState.error && (appState.renderBoundaryRouteId === id || appState.loaderBoundaryRouteId === id) ? deserializeError(appState.error) : undefined;\n\n    // This needs to run after we check for the error from a previous render,\n    // otherwise we will incorrectly render this boundary for a loader error\n    // deeper in the tree.\n    if (appState.trackBoundaries) {\n      appState.renderBoundaryRouteId = id;\n    }\n    context = maybeServerRenderError ? {\n      id,\n      get data() {\n        console.error(\"You cannot `useLoaderData` in an error boundary.\");\n        return undefined;\n      }\n    } : {\n      id,\n      data\n    };\n    element = /*#__PURE__*/React.createElement(RemixErrorBoundary, {\n      location: location,\n      component: ErrorBoundary,\n      error: maybeServerRenderError\n    }, element);\n  }\n\n  // It's important for the route context to be above the error boundary so that\n  // a call to `useLoaderData` doesn't accidentally get the parents route's data.\n  return /*#__PURE__*/React.createElement(RemixRouteContext.Provider, {\n    value: context\n  }, element);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Public API\n\n/**\n * Defines the prefetching behavior of the link:\n *\n * - \"intent\": Fetched when the user focuses or hovers the link\n * - \"render\": Fetched when the link is rendered\n * - \"none\": Never fetched\n */\n\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let [maybePrefetch, setMaybePrefetch] = React.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React.useState(false);\n  let {\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart\n  } = theirElementProps;\n  React.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n  }, [prefetch]);\n  let setIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(true);\n    }\n  };\n  let cancelIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(false);\n      setShouldPrefetch(false);\n    }\n  };\n  React.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  return [shouldPrefetch, {\n    onFocus: composeEventHandlers(onFocus, setIntent),\n    onBlur: composeEventHandlers(onBlur, cancelIntent),\n    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n    onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n  }];\n}\n\n/**\n * A special kind of `<Link>` that knows whether or not it is \"active\".\n *\n * @see https://remix.run/api/remix#navlink\n */\nlet NavLink = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavLink$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nNavLink.displayName = \"NavLink\";\n/**\n * This component renders an anchor tag and is the primary way the user will\n * navigate around your website.\n *\n * @see https://remix.run/api/remix#link\n */\nlet Link = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let href = useHref(to);\n  let [shouldPrefetch, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link$1, _extends({\n    ref: forwardedRef,\n    to: to\n  }, props, prefetchHandlers)), shouldPrefetch ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nLink.displayName = \"Link\";\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\n\n/**\n * Renders the `<link>` tags for the current routes.\n *\n * @see https://remix.run/api/remix#meta-links-scripts\n */\nfunction Links() {\n  let {\n    matches,\n    routeModules,\n    manifest\n  } = useRemixEntryContext();\n  let links = React.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, links.map(link => {\n    if (isPageLinkDescriptor(link)) {\n      return /*#__PURE__*/React.createElement(PrefetchPageLinks, _extends({\n        key: link.page\n      }, link));\n    }\n    let imageSrcSet = null;\n\n    // In React 17, <link imageSrcSet> and <link imageSizes> will warn\n    // because the DOM attributes aren't recognized, so users need to pass\n    // them in all lowercase to forward the attributes to the node without a\n    // warning. Normalize so that either property can be used in Remix.\n    if (\"useId\" in React) {\n      if (link.imagesrcset) {\n        link.imageSrcSet = imageSrcSet = link.imagesrcset;\n        delete link.imagesrcset;\n      }\n      if (link.imagesizes) {\n        link.imageSizes = link.imagesizes;\n        delete link.imagesizes;\n      }\n    } else {\n      if (link.imageSrcSet) {\n        link.imagesrcset = imageSrcSet = link.imageSrcSet;\n        delete link.imageSrcSet;\n      }\n      if (link.imageSizes) {\n        link.imagesizes = link.imageSizes;\n        delete link.imageSizes;\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"link\", _extends({\n      key: link.rel + (link.href || \"\") + (imageSrcSet || \"\")\n    }, link));\n  }));\n}\n\n/**\n * This component renders all of the `<link rel=\"prefetch\">` and\n * `<link rel=\"modulepreload\"/>` tags for all the assets (data, modules, css) of\n * a given page.\n *\n * @param props\n * @param props.page\n * @see https://remix.run/api/remix#prefetchpagelinks-\n */\nfunction PrefetchPageLinks({\n  page,\n  ...dataLinkProps\n}) {\n  let {\n    clientRoutes\n  } = useRemixEntryContext();\n  let matches = React.useMemo(() => matchClientRoutes(clientRoutes, page), [clientRoutes, page]);\n  if (!matches) {\n    console.warn(`Tried to prefetch ${page} but no routes matched.`);\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(PrefetchPageLinksImpl, _extends({\n    page: page,\n    matches: matches\n  }, dataLinkProps));\n}\nfunction usePrefetchedStylesheets(matches) {\n  let {\n    routeModules\n  } = useRemixEntryContext();\n  let [styleLinks, setStyleLinks] = React.useState([]);\n  React.useEffect(() => {\n    let interrupted = false;\n    getStylesheetPrefetchLinks(matches, routeModules).then(links => {\n      if (!interrupted) setStyleLinks(links);\n    });\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, routeModules]);\n  return styleLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let {\n    matches,\n    manifest\n  } = useRemixEntryContext();\n  let newMatchesForData = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, location, \"data\"), [page, nextMatches, matches, location]);\n  let newMatchesForAssets = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, location, \"assets\"), [page, nextMatches, matches, location]);\n  let dataHrefs = React.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]);\n  let moduleHrefs = React.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]);\n\n  // needs to be a hook with async behavior because we need the modules, not\n  // just the manifest like the other links in here.\n  let styleLinks = usePrefetchedStylesheets(newMatchesForAssets);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dataHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"prefetch\",\n    as: \"fetch\",\n    href: href\n  }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"modulepreload\",\n    href: href\n  }, linkProps))), styleLinks.map(link =>\n  /*#__PURE__*/\n  // these don't spread `linkProps` because they are full link descriptors\n  // already with their own props\n  React.createElement(\"link\", _extends({\n    key: link.href\n  }, link))));\n}\n\n/**\n * Renders the `<title>` and `<meta>` tags for the current routes.\n *\n * @see https://remix.run/api/remix#meta-links-scripts\n */\nfunction V1Meta() {\n  let {\n    matches,\n    routeData,\n    routeModules\n  } = useRemixEntryContext();\n  let location = useLocation();\n  let meta = {};\n  let parentsData = {};\n  for (let match of matches) {\n    let routeId = match.route.id;\n    let data = routeData[routeId];\n    let params = match.params;\n    let routeModule = routeModules[routeId];\n    if (routeModule.meta) {\n      let routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        parentsData,\n        params,\n        location,\n        matches: undefined\n      }) : routeModule.meta;\n      if (routeMeta && Array.isArray(routeMeta)) {\n        throw new Error(\"The route at \" + match.route.path + \" returns an array. This is only supported with the `v2_meta` future flag \" + \"in the Remix config. Either set the flag to `true` or update the route's \" + \"meta function to return an object.\" + \"\\n\\nTo reference the v1 meta function API, see https://remix.run/api/conventions#meta\"\n        // TODO: Add link to the docs once they are written\n        // + \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/api/remix#future-v2-meta.\"\n        );\n      }\n\n      Object.assign(meta, routeMeta);\n    }\n    parentsData[routeId] = data;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(meta).map(([name, value]) => {\n    if (!value) {\n      return null;\n    }\n    if ([\"charset\", \"charSet\"].includes(name)) {\n      return /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charset\",\n        charSet: value\n      });\n    }\n    if (name === \"title\") {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(value));\n    }\n\n    // Open Graph tags use the `property` attribute, while other meta tags\n    // use `name`. See https://ogp.me/\n    //\n    // Namespaced attributes:\n    //  - https://ogp.me/#type_music\n    //  - https://ogp.me/#type_video\n    //  - https://ogp.me/#type_article\n    //  - https://ogp.me/#type_book\n    //  - https://ogp.me/#type_profile\n    //\n    // Facebook specific tags begin with `fb:` and also use the `property`\n    // attribute.\n    //\n    // Twitter specific tags begin with `twitter:` but they use `name`, so\n    // they are excluded.\n    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);\n    return [value].flat().map(content => {\n      if (isOpenGraphTag) {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          property: name,\n          content: content,\n          key: name + content\n        });\n      }\n      if (typeof content === \"string\") {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          name: name,\n          content: content,\n          key: name + content\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"meta\", _extends({\n        key: name + JSON.stringify(content)\n      }, content));\n    });\n  }));\n}\nfunction V2Meta() {\n  let {\n    matches,\n    routeData,\n    routeModules\n  } = useRemixEntryContext();\n  let location = useLocation();\n  let meta = [];\n  let parentsData = {};\n  let matchesWithMeta = matches.map(match => ({\n    ...match,\n    meta: []\n  }));\n  let index = -1;\n  for (let match of matches) {\n    index++;\n    let routeId = match.route.id;\n    let data = routeData[routeId];\n    let params = match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    if (routeModule !== null && routeModule !== void 0 && routeModule.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        parentsData,\n        params,\n        location,\n        matches: matchesWithMeta\n      }) : routeModule.meta;\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\"The `v2_meta` API is enabled in the Remix config, but the route at \" + match.route.path + \" returns an invalid value. In v2, all route meta functions must \" + \"return an array of meta objects.\" +\n      // TODO: Add link to the docs once they are written\n      // \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/api/remix#future-v2-meta.\" +\n      \"\\n\\nTo reference the v1 meta function API, see https://remix.run/api/conventions#meta\");\n    }\n    matchesWithMeta[index].meta = routeMeta;\n    meta = routeMeta;\n    parentsData[routeId] = data;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, meta.flat().map(metaProps => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"title\" in metaProps) {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(metaProps.title));\n    }\n    if (\"charSet\" in metaProps || \"charset\" in metaProps) {\n      // TODO: We normalize this for the user in v1, but should we continue\n      // to do that? Seems like a nice convenience IMO.\n      return /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charset\",\n        charSet: metaProps.charSet || metaProps.charset\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"meta\", _extends({\n      key: JSON.stringify(metaProps)\n    }, metaProps));\n  }));\n}\nfunction Meta() {\n  let {\n    future\n  } = useRemixEntryContext();\n  return future.v2_meta ? /*#__PURE__*/React.createElement(V2Meta, null) : /*#__PURE__*/React.createElement(V1Meta, null);\n}\n\n/**\n * Tracks whether Remix has finished hydrating or not, so scripts can be skipped\n * during client-side updates.\n */\nlet isHydrated = false;\n/**\n * Renders the `<script>` tags needed for the initial render. Bundles for\n * additional routes are loaded later as needed.\n *\n * @param props Additional properties to add to each script tag that is rendered.\n * In addition to scripts, \\<link rel=\"modulepreload\"> tags receive the crossOrigin\n * property if provided.\n *\n * @see https://remix.run/api/remix#meta-links-scripts\n */\nfunction Scripts(props) {\n  let {\n    manifest,\n    matches,\n    pendingLocation,\n    clientRoutes,\n    serverHandoffString\n  } = useRemixEntryContext();\n  React.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let initialScripts = React.useMemo(() => {\n    let contextScript = serverHandoffString ? `window.__remixContext = ${serverHandoffString};` : \"\";\n    let routeModulesScript = `${matches.map((match, index) => `import ${JSON.stringify(manifest.url)};\nimport * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(\"\\n\")}\nwindow.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(contextScript),\n      type: undefined\n    })), /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      dangerouslySetInnerHTML: createHtml(routeModulesScript),\n      type: \"module\",\n      async: true\n    })));\n    // disabled deps array because we are purposefully only rendering this once\n    // for hydration, after that we want to just continue rendering the initial\n    // scripts as they were when the page first loaded\n    // eslint-disable-next-line\n  }, []);\n\n  // avoid waterfall when importing the next route module\n  let nextMatches = React.useMemo(() => {\n    if (pendingLocation) {\n      // FIXME: can probably use transitionManager `nextMatches`\n      let matches = matchClientRoutes(clientRoutes, pendingLocation);\n      invariant(matches, `No routes match path \"${pendingLocation.pathname}\"`);\n      return matches;\n    }\n    return [];\n  }, [pendingLocation, clientRoutes]);\n  let routePreloads = matches.concat(nextMatches).map(match => {\n    let route = manifest.routes[match.route.id];\n    return (route.imports || []).concat([route.module]);\n  }).flat(1);\n  let preloads = manifest.entry.imports.concat(routePreloads);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.url,\n    crossOrigin: props.crossOrigin\n  }), /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.entry.module,\n    crossOrigin: props.crossOrigin\n  }), dedupe(preloads).map(path => /*#__PURE__*/React.createElement(\"link\", {\n    key: path,\n    rel: \"modulepreload\",\n    href: path,\n    crossOrigin: props.crossOrigin\n  })), isHydrated ? null : initialScripts);\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\n/**\n * A Remix-aware `<form>`. It behaves like a normal form except that the\n * interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n *\n * @see https://remix.run/api/remix#form\n */\nlet Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    ref: ref\n  }));\n});\nForm.displayName = \"Form\";\nlet FormImpl = /*#__PURE__*/React.forwardRef(({\n  reloadDocument = false,\n  replace = false,\n  method = \"get\",\n  action,\n  encType = \"application/x-www-form-urlencoded\",\n  fetchKey,\n  onSubmit,\n  ...props\n}, forwardedRef) => {\n  let submit = useSubmitImpl(fetchKey);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action);\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    encType: encType,\n    onSubmit: reloadDocument ? undefined : event => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n      let submitter = event.nativeEvent.submitter;\n      let submitMethod = (submitter === null || submitter === void 0 ? void 0 : submitter.formMethod) || method;\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace\n      });\n    }\n  }, props));\n});\nFormImpl.displayName = \"FormImpl\";\n/**\n * Resolves a `<form action>` path relative to the current route.\n *\n * @see https://remix.run/api/remix#useformaction\n */\nfunction useFormAction(action,\n// TODO: Remove method param in v2 as it's no longer needed and is a breaking change\nmethod = \"get\") {\n  let {\n    id\n  } = useRemixRouteContext();\n  let resolvedPath = useResolvedPath(action ? action : \".\");\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  let {\n    search,\n    hash\n  } = resolvedPath;\n  let isIndexRoute = id.endsWith(\"/index\");\n  if (action == null) {\n    search = location.search;\n    hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (isIndexRoute) {\n      let params = new URLSearchParams(search);\n      params.delete(\"index\");\n      search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n  if ((action == null || action === \".\") && isIndexRoute) {\n    search = search ? search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  return createPath({\n    pathname: resolvedPath.pathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n *\n * @see https://remix.run/api/remix#usesubmit\n */\nfunction useSubmit() {\n  return useSubmitImpl();\n}\nlet defaultMethod = \"get\";\nlet defaultEncType = \"application/x-www-form-urlencoded\";\nfunction useSubmitImpl(key) {\n  let navigate = useNavigate();\n  let defaultAction = useFormAction();\n  let {\n    transitionManager\n  } = useRemixEntryContext();\n  return React.useCallback((target, options = {}) => {\n    let method;\n    let action;\n    let encType;\n    let formData;\n    if (isFormElement(target)) {\n      let submissionTrigger = options.submissionTrigger;\n      method = options.method || target.getAttribute(\"method\") || defaultMethod;\n      action = options.action || target.getAttribute(\"action\") || defaultAction;\n      encType = options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n      formData = new FormData(target);\n      if (submissionTrigger && submissionTrigger.name) {\n        formData.append(submissionTrigger.name, submissionTrigger.value);\n      }\n    } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n      let form = target.form;\n      if (form == null) {\n        throw new Error(`Cannot submit a <button> without a <form>`);\n      }\n\n      // <button>/<input type=\"submit\"> may override attributes of <form>\n\n      method = options.method || target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n      action = options.action || target.getAttribute(\"formaction\") || form.getAttribute(\"action\") || defaultAction;\n      encType = options.encType || target.getAttribute(\"formenctype\") || form.getAttribute(\"enctype\") || defaultEncType;\n      formData = new FormData(form);\n\n      // Include name + value from a <button>\n      if (target.name) {\n        formData.append(target.name, target.value);\n      }\n    } else {\n      if (isHtmlElement(target)) {\n        throw new Error(`Cannot submit element that is not <form>, <button>, or ` + `<input type=\"submit|image\">`);\n      }\n      method = options.method || \"get\";\n      action = options.action || defaultAction;\n      encType = options.encType || \"application/x-www-form-urlencoded\";\n      if (target instanceof FormData) {\n        formData = target;\n      } else {\n        formData = new FormData();\n        if (target instanceof URLSearchParams) {\n          for (let [name, value] of target) {\n            formData.append(name, value);\n          }\n        } else if (target != null) {\n          for (let name of Object.keys(target)) {\n            formData.append(name, target[name]);\n          }\n        }\n      }\n    }\n    if (typeof document === \"undefined\") {\n      throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n    }\n    let {\n      protocol,\n      host\n    } = window.location;\n    let url = new URL(action, `${protocol}//${host}`);\n    if (method.toLowerCase() === \"get\") {\n      // Start with a fresh set of params and wipe out the old params to\n      // match default browser behavior\n      let params = new URLSearchParams();\n      let hasParams = false;\n      for (let [name, value] of formData) {\n        if (typeof value === \"string\") {\n          hasParams = true;\n          params.append(name, value);\n        } else {\n          throw new Error(`Cannot submit binary form data using GET`);\n        }\n      }\n\n      // Preserve any incoming ?index param for fetcher GET submissions\n      let isIndexAction = new URLSearchParams(url.search).getAll(\"index\").some(v => v === \"\");\n      if (key != null && isIndexAction) {\n        hasParams = true;\n        params.append(\"index\", \"\");\n      }\n      url.search = hasParams ? `?${params.toString()}` : \"\";\n    }\n    let submission = {\n      formData,\n      action: url.pathname + url.search,\n      method: method.toUpperCase(),\n      encType,\n      key: Math.random().toString(36).substr(2, 8)\n    };\n    if (key) {\n      transitionManager.send({\n        type: \"fetcher\",\n        href: submission.action,\n        submission,\n        key\n      });\n    } else {\n      setNextNavigationSubmission(submission);\n      navigate(url.pathname + url.search, {\n        replace: options.replace\n      });\n    }\n  }, [defaultAction, key, navigate, transitionManager]);\n}\nlet nextNavigationSubmission;\nfunction setNextNavigationSubmission(submission) {\n  nextNavigationSubmission = submission;\n}\nfunction consumeNextNavigationSubmission() {\n  let submission = nextNavigationSubmission;\n  nextNavigationSubmission = undefined;\n  return submission;\n}\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes, which automatically happens on the next `<Link>` click when Remix\n * detects a new version of the app is available on the server.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n *\n * @see https://remix.run/api/remix#usebeforeunload\n */\nfunction useBeforeUnload(callback) {\n  React.useEffect(() => {\n    window.addEventListener(\"beforeunload\", callback);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback);\n    };\n  }, [callback]);\n}\n/**\n * Returns the current route matches on the page. This is useful for creating\n * layout abstractions with your current routes.\n *\n * @see https://remix.run/api/remix#usematches\n */\nfunction useMatches() {\n  let {\n    matches,\n    routeData,\n    routeModules\n  } = useRemixEntryContext();\n  return React.useMemo(() => matches.map(match => {\n    var _routeModules$match$r;\n    let {\n      pathname,\n      params\n    } = match;\n    return {\n      id: match.route.id,\n      pathname,\n      params,\n      data: routeData[match.route.id],\n      // if the module fails to load or an error/response is thrown, the module\n      // won't be defined.\n      handle: (_routeModules$match$r = routeModules[match.route.id]) === null || _routeModules$match$r === void 0 ? void 0 : _routeModules$match$r.handle\n    };\n  }), [matches, routeData, routeModules]);\n}\n\n/**\n * Returns the JSON parsed data from the current route's `loader`.\n *\n * @see https://remix.run/api/remix#useloaderdata\n */\nfunction useLoaderData() {\n  return useRemixRouteContext().data;\n}\n\n/**\n * Returns the JSON parsed data from the current route's `action`.\n *\n * @see https://remix.run/api/remix#useactiondata\n */\nfunction useActionData() {\n  let {\n    id: routeId\n  } = useRemixRouteContext();\n  let {\n    transitionManager\n  } = useRemixEntryContext();\n  let {\n    actionData\n  } = transitionManager.getState();\n  return actionData ? actionData[routeId] : undefined;\n}\n\n/**\n * Returns everything you need to know about a page transition to build pending\n * navigation indicators and optimistic UI on data mutations.\n *\n * @see https://remix.run/api/remix#usetransition\n */\nfunction useTransition() {\n  let {\n    transitionManager\n  } = useRemixEntryContext();\n  return transitionManager.getState().transition;\n}\nfunction createFetcherForm(fetchKey) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    // TODO: make ANOTHER form w/o a fetchKey prop\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      fetchKey: fetchKey\n    }));\n  });\n  FetcherForm.displayName = \"fetcher.Form\";\n  return FetcherForm;\n}\nlet fetcherId = 0;\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n *\n * @see https://remix.run/api/remix#usefetcher\n */\nfunction useFetcher() {\n  let {\n    transitionManager\n  } = useRemixEntryContext();\n  let [key] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => createFetcherForm(key));\n  let [load] = React.useState(() => href => {\n    transitionManager.send({\n      type: \"fetcher\",\n      href,\n      key\n    });\n  });\n  let submit = useSubmitImpl(key);\n  let fetcher = transitionManager.getFetcher(key);\n  let fetcherWithComponents = React.useMemo(() => ({\n    Form,\n    submit,\n    load,\n    ...fetcher\n  }), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => transitionManager.deleteFetcher(key);\n  }, [transitionManager, key]);\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n *\n * @see https://remix.run/api/remix#usefetchers\n */\nfunction useFetchers() {\n  let {\n    transitionManager\n  } = useRemixEntryContext();\n  let {\n    fetchers\n  } = transitionManager.getState();\n  return [...fetchers.values()];\n}\n\n// Dead Code Elimination magic for production builds.\n// This way devs don't have to worry about doing the NODE_ENV check themselves.\n// If running an un-bundled server outside of `remix dev` you will still need\n// to set the REMIX_DEV_SERVER_WS_PORT manually.\nconst LiveReload = process.env.NODE_ENV !== \"development\" ? () => null : function LiveReload({\n  port = Number(process.env.REMIX_DEV_SERVER_WS_PORT || 8002),\n  nonce = undefined\n}) {\n  let js = String.raw;\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: nonce,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: js`\n                function remixLiveReloadConnect(config) {\n                  let protocol = location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n                  let host = location.hostname;\n                  let socketPath = protocol + \"//\" + host + \":\" + ${String(port)} + \"/socket\";\n                  let ws = new WebSocket(socketPath);\n                  ws.onmessage = (message) => {\n                    let event = JSON.parse(message.data);\n                    if (event.type === \"LOG\") {\n                      console.log(event.message);\n                    }\n                    if (event.type === \"RELOAD\") {\n                      console.log(\"\uD83D\uDCBF Reloading window ...\");\n                      window.location.reload();\n                    }\n                  };\n                  ws.onopen = () => {\n                    if (config && typeof config.onOpen === \"function\") {\n                      config.onOpen();\n                    }\n                  };\n                  ws.onclose = (event) => {\n                    if (event.code === 1006) {\n                      console.log(\"Remix dev asset server web socket closed. Reconnecting...\");\n                      setTimeout(\n                        () =>\n                          remixLiveReloadConnect({\n                            onOpen: () => window.location.reload(),\n                          }),\n                        1000\n                      );\n                    }\n                  };\n                  ws.onerror = (error) => {\n                    console.log(\"Remix dev asset server web socket error:\");\n                    console.error(error);\n                  };\n                }\n                remixLiveReloadConnect();\n              `\n    }\n  });\n};\n\nexport { Form, FormImpl, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixEntry, RemixEntryContext, RemixRoute, Scripts, composeEventHandlers, useActionData, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLoaderData, useMatches, useSubmit, useSubmitImpl, useTransition };\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n", "/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n", "import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n// Contexts for data routers\nexport const DataStaticRouterContext =\n  React.createContext<StaticHandlerContext | null>(null);\nif (__DEV__) {\n  DataStaticRouterContext.displayName = \"DataStaticRouterContext\";\n}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n", "import * as React from \"react\";\nimport type {\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  warning,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n  DataStaticRouterContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorElement() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n  return (\n    <>\n      <h2>Unhandled Thrown Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      <p>💿 Hey developer 👋</p>\n      <p>\n        You can provide a way better UX than this when your app throws errors by\n        providing your own&nbsp;\n        <code style={codeStyles}>errorElement</code> props on&nbsp;\n        <code style={codeStyles}>&lt;Route&gt;</code>\n      </p>\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteErrorContext.Provider\n        value={this.state.error}\n        children={this.props.component}\n      />\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataStaticRouterContext = React.useContext(DataStaticRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataStaticRouterContext && match.route.errorElement) {\n    dataStaticRouterContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = dataRouterState\n      ? match.route.errorElement || <DefaultErrorElement />\n      : null;\n    let getChildren = () => (\n      <RenderedRoute\n        match={match}\n        routeContext={{\n          outlet,\n          matches: parentMatches.concat(renderedMatches.slice(0, index + 1)),\n        }}\n      >\n        {error\n          ? errorElement\n          : match.route.element !== undefined\n          ? match.route.element\n          : outlet}\n      </RenderedRoute>\n    );\n    // Only wrap in an error boundary within data router usages when we have an\n    // errorElement on this route.  Otherwise let it bubble up to an ancestor\n    // errorElement\n    return dataRouterState && (match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useLoaderData must be used inside a RouteContext`);\n\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `useLoaderData can only be used on routes that contain a unique \"id\"`\n  );\n\n  return state.loaderData[thisRoute.route.id];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let route = React.useContext(RouteContext);\n  let thisRoute = route.matches[route.matches.length - 1];\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  invariant(route, `useRouteError must be used inside a RouteContext`);\n  invariant(\n    thisRoute.route.id,\n    `useRouteError can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[thisRoute.route.id];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n", "import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  invariant,\n  parsePath,\n  stripBasename,\n  warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    () => router.state,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    () => router.state\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  return (\n    <DataRouterContext.Provider\n      value={{\n        router,\n        navigator,\n        static: false,\n        // Do we need this?\n        basename,\n      }}\n    >\n      <DataRouterStateContext.Provider value={state}>\n        <Router\n          basename={router.basename}\n          location={router.state.location}\n          navigationType={router.state.historyAction}\n          navigator={navigator}\n        >\n          {router.state.initialized ? <Routes /> : fallbackElement}\n        </Router>\n      </DataRouterStateContext.Provider>\n    </DataRouterContext.Provider>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactElement;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  if (typeof children === \"function\") {\n    return children(data);\n  }\n  return <>{children}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, parentPath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let treePath = [...parentPath, index];\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      hasErrorBoundary: element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\n/**\n * @private\n * Walk the route tree and add hasErrorBoundary if it's not provided, so that\n * users providing manual route arrays can just specify errorElement\n */\nexport function enhanceManualRouteObjects(\n  routes: RouteObject[]\n): RouteObject[] {\n  return routes.map((route) => {\n    let routeClone = { ...route };\n    if (routeClone.hasErrorBoundary == null) {\n      routeClone.hasErrorBoundary = routeClone.errorElement != null;\n    }\n    if (routeClone.children) {\n      routeClone.children = enhanceManualRouteObjects(routeClone.children);\n    }\n    return routeClone;\n  });\n}\n", "import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  enhanceManualRouteObjects,\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  DataStaticRouterContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  DataStaticRouterContext as UNSAFE_DataStaticRouterContext,\n  enhanceManualRouteObjects as UNSAFE_enhanceManualRouteObjects,\n};\n", "import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  for (let key of defaultSearchParams.keys()) {\n    if (!searchParams.has(key)) {\n      defaultSearchParams.getAll(key).forEach((value) => {\n        searchParams.append(key, value);\n      });\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method, encType, formData };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_enhanceManualRouteObjects as enhanceManualRouteObjects,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HydrationState,\n  Router as RemixRouter,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  invariant,\n  joinPaths,\n  ErrorResponse,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_DataStaticRouterContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_enhanceManualRouteObjects,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let href = useHref(to, { relative });\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      submit(submitter || event.currentTarget, { method, replace, relative });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\ninterface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      getSearchParamsForLocation(\n        location.search,\n        defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  let resolvedAction = action ?? \".\";\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(resolvedAction, { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on unload\n  useBeforeUnload(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  React.useLayoutEffect(() => {\n    try {\n      let sessionPositions = sessionStorage.getItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY\n      );\n      if (sessionPositions) {\n        savedScrollPositions = JSON.parse(sessionPositions);\n      }\n    } catch (e) {\n      // no-op, use default empty object\n    }\n  }, [storageKey]);\n\n  // Enable scroll restoration in the router\n  React.useLayoutEffect(() => {\n    let disableScrollRestoration = router?.enableScrollRestoration(\n      savedScrollPositions,\n      () => window.scrollY,\n      getKey\n    );\n    return () => disableScrollRestoration && disableScrollRestoration();\n  }, [router, getKey]);\n\n  // Restore scrolling when state.restoreScrollPosition changes\n  React.useLayoutEffect(() => {\n    // Explicit false means don't do anything (used for submissions)\n    if (restoreScrollPosition === false) {\n      return;\n    }\n\n    // been here before, scroll to it\n    if (typeof restoreScrollPosition === \"number\") {\n      window.scrollTo(0, restoreScrollPosition);\n      return;\n    }\n\n    // try to scroll to the hash\n    if (location.hash) {\n      let el = document.getElementById(location.hash.slice(1));\n      if (el) {\n        el.scrollIntoView();\n        return;\n      }\n    }\n\n    // Opt out of scroll reset if this link requested it\n    if (preventScrollReset === true) {\n      return;\n    }\n\n    // otherwise go to the top on new locations\n    window.scrollTo(0, 0);\n  }, [location, restoreScrollPosition, preventScrollReset]);\n}\n\nfunction useBeforeUnload(callback: () => any): void {\n  React.useEffect(() => {\n    window.addEventListener(\"beforeunload\", callback);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback);\n    };\n  }, [callback]);\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n//#endregion\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport React__default, { useContext } from 'react';\n\nclass RemixErrorBoundary extends React__default.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: props.error || null,\n      location: props.location\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application (even the HTML!) that will have no effect--the error page\n    // continues to display. This gives us a mechanism to recover from the error\n    // when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error || null,\n        location: props.location\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location\n    };\n  }\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/React__default.createElement(this.props.component, {\n        error: this.state.error\n      });\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\n/**\n * When app's don't provide a root level ErrorBoundary, we default to this.\n */\nfunction RemixRootDefaultErrorBoundary({\n  error\n}) {\n  console.error(error);\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Application Error!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"main\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontSize: \"24px\"\n    }\n  }, \"Application Error\"), /*#__PURE__*/React__default.createElement(\"pre\", {\n    style: {\n      padding: \"2rem\",\n      background: \"hsla(10, 50%, 50%, 0.1)\",\n      color: \"red\",\n      overflow: \"auto\"\n    }\n  }, error.stack)), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information.\"\n              );\n            `\n    }\n  })));\n}\nlet RemixCatchContext = /*#__PURE__*/React__default.createContext(undefined);\n\n/**\n * Returns the status code and thrown response data.\n *\n * @see https://remix.run/api/conventions#catchboundary\n */\nfunction useCatch() {\n  return useContext(RemixCatchContext);\n}\nfunction RemixCatchBoundary({\n  catch: catchVal,\n  component: Component,\n  children\n}) {\n  if (catchVal) {\n    return /*#__PURE__*/React__default.createElement(RemixCatchContext.Provider, {\n      value: catchVal\n    }, /*#__PURE__*/React__default.createElement(Component, null));\n  }\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);\n}\n\n/**\n * When app's don't provide a root level CatchBoundary, we default to this.\n */\nfunction RemixRootDefaultCatchBoundary() {\n  let caught = useCatch();\n  return /*#__PURE__*/React__default.createElement(\"html\", {\n    lang: \"en\"\n  }, /*#__PURE__*/React__default.createElement(\"head\", null, /*#__PURE__*/React__default.createElement(\"meta\", {\n    charSet: \"utf-8\"\n  }), /*#__PURE__*/React__default.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width,initial-scale=1,viewport-fit=cover\"\n  }), /*#__PURE__*/React__default.createElement(\"title\", null, \"Unhandled Thrown Response!\")), /*#__PURE__*/React__default.createElement(\"body\", null, /*#__PURE__*/React__default.createElement(\"h1\", {\n    style: {\n      fontFamily: \"system-ui, sans-serif\",\n      padding: \"2rem\"\n    }\n  }, caught.status, \" \", caught.statusText), /*#__PURE__*/React__default.createElement(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              console.log(\n                \"\uD83D\uDCBF Hey developer\uD83D\uDC4B. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information.\"\n              );\n            `\n    }\n  })));\n}\n\nexport { RemixCatchBoundary, RemixErrorBoundary, RemixRootDefaultCatchBoundary, RemixRootDefaultErrorBoundary, useCatch };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport { invariant as default };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n/**\n * A React component that is rendered when the server throws a Response.\n *\n * @see https://remix.run/api/conventions#catchboundary\n */\n\n/**\n * A React component that is rendered when there is an error on a route.\n *\n * @see https://remix.run/api/conventions#errorboundary\n */\n\n/**\n * A function that defines `<link>` tags to be inserted into the `<head>` of\n * the document on route transitions.\n *\n * @see https://remix.run/api/remix#meta-links-scripts\n */\n\n/**\n * A function that returns an object of name + content pairs to use for\n * `<meta>` tags for a route. These tags will be merged with (and take\n * precedence over) tags from parent routes.\n *\n * @see https://remix.run/api/remix#meta-links-scripts\n */\n\n// TODO: Replace in v2\n\n/**\n * A name/content pair used to render `<meta>` tags in a meta function for a\n * route. The value can be either a string, which will render a single `<meta>`\n * tag, or an array of strings that will render multiple tags with the same\n * `name` attribute.\n */\n\n// TODO: Replace in v2\n\n/**\n * During client side transitions Remix will optimize reloading of routes that\n * are currently on the page by avoiding loading routes that aren't changing.\n * However, in some cases, like form submissions or search params Remix doesn't\n * know which routes need to be reloaded so it reloads them all to be safe.\n *\n * This function lets apps further optimize by returning `false` when Remix is\n * about to reload the route. A common case is a root loader with nothing but\n * environment variables: after form submissions the root probably doesn't need\n * to be reloaded.\n *\n * @see https://remix.run/api/conventions#unstable_shouldreload\n */\n\n/**\n * A React component that is rendered for a route.\n */\n\n/**\n * An arbitrary object that is associated with a route.\n *\n * @see https://remix.run/api/conventions#handle\n */\n\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import( /* webpackIgnore: true */route.module);\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    // User got caught in the middle of a deploy and the CDN no longer has the\n    // asset we're trying to import! Reload from the server and the user\n    // (should) get the new manifest--unless the developer purged the static\n    // assets, the manifest path, but not the documents \uD83D\uDE2C\n    window.location.reload();\n    return new Promise(() => {\n      // check out of this hook cause the DJs never gonna re[s]olve this\n    });\n  }\n}\n\nexport { loadRouteModule };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { parsePath } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Gets all the links for a set of matches. The modules are assumed to have been\n * loaded already.\n */\nfunction getLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map(match => {\n    var _module$links;\n    let module = routeModules[match.route.id];\n    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];\n  }).flat(1);\n  let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);\n  return dedupe(descriptors, preloads);\n}\nasync function prefetchStyleLinks(routeModule) {\n  if (!routeModule.links) return;\n  let descriptors = routeModule.links();\n  if (!descriptors) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n\n  // don't block for non-matching media queries\n  let matchingLinks = styleLinks.filter(link => !link.media || window.matchMedia(link.media).matches);\n  await Promise.all(matchingLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise(resolve => {\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      // if a navigation interrupts this prefetch React will update the <head>\n      // and remove the link we put in there manually, so we check if it's still\n      // there before trying to remove it\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) return false;\n\n  // <link> may not have an href if <link rel=\"preload\"> is used with imagesrcset + imagesizes\n  // https://github.com/remix-run/remix/issues/184\n  // https://html.spec.whatwg.org/commit-snapshots/cb4f5ff75de5f4cbd7013c4abad02f21c77d4d1c/#attr-link-imagesrcset\n  if (object.href == null) {\n    return object.rel === \"preload\" && (typeof object.imageSrcSet === \"string\" || typeof object.imagesrcset === \"string\") && (typeof object.imageSizes === \"string\" || typeof object.imagesizes === \"string\");\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getStylesheetPrefetchLinks(matches, routeModules) {\n  let links = await Promise.all(matches.map(async match => {\n    let mod = await loadRouteModule(match.route, routeModules);\n    return mod.links ? mod.links() : [];\n  }));\n  return links.flat(1).filter(isHtmlLinkDescriptor).filter(link => link.rel === \"stylesheet\" || link.rel === \"preload\").map(link => link.rel === \"preload\" ? {\n    ...link,\n    rel: \"prefetch\"\n  } : {\n    ...link,\n    rel: \"prefetch\",\n    as: \"style\"\n  });\n}\n\n// This is ridiculously identical to transition.ts `filterMatchesToLoad`\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, location, mode) {\n  let path = parsePathPatch(page);\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    var _currentMatches$index;\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname ||\n      // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith(\"*\")) && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n\n  // NOTE: keep this mostly up-to-date w/ the transition data diff, but this\n  // version doesn't care about submissions\n  let newMatches = mode === \"data\" && location.search !== path.search ?\n  // this is really similar to stuff in transition.ts, maybe somebody smarter\n  // than me (or in less of a hurry) can share some of it. You're the best.\n  nextMatches.filter((match, index) => {\n    if (!match.route.hasLoader) {\n      return false;\n    }\n    if (isNew(match, index) || matchPathChanged(match, index)) {\n      return true;\n    }\n    if (match.route.shouldReload) {\n      return match.route.shouldReload({\n        params: match.params,\n        prevUrl: new URL(location.pathname + location.search + location.hash, window.origin),\n        url: new URL(page, window.origin)\n      });\n    }\n    return true;\n  }) : nextMatches.filter((match, index) => {\n    return (mode === \"assets\" || match.route.hasLoader) && (isNew(match, index) || matchPathChanged(match, index));\n  });\n  return newMatches;\n}\nfunction getDataLinkHrefs(page, matches, manifest) {\n  let path = parsePathPatch(page);\n  return dedupeHrefs(matches.filter(match => manifest.routes[match.route.id].hasLoader).map(match => {\n    let {\n      pathname,\n      search\n    } = path;\n    let searchParams = new URLSearchParams(search);\n    searchParams.set(\"_data\", match.route.id);\n    return `${pathname}?${searchParams}`;\n  }));\n}\nfunction getModuleLinkHrefs(matches, manifestPatch) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifestPatch.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\n\n// The `<Script>` will render rel=modulepreload for the current page, we don't\n// need to include them in a page prefetch, this gives us the list to remove\n// while deduping.\nfunction getCurrentPageModulePreloadHrefs(matches, manifest) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifest.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction dedupe(descriptors, preloads) {\n  let set = new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let str = JSON.stringify(descriptor);\n    if (!set.has(str)) {\n      set.add(str);\n      deduped.push(descriptor);\n    }\n    return deduped;\n  }, []);\n}\n\n// https://github.com/remix-run/history/issues/897\nfunction parsePathPatch(href) {\n  let path = parsePath(href);\n  if (path.search === undefined) path.search = \"\";\n  return path;\n}\n\nexport { dedupe, getDataLinkHrefs, getLinksForMatches, getModuleLinkHrefs, getNewMatchesForLinks, getStylesheetPrefetchLinks, isHtmlLinkDescriptor, isPageLinkDescriptor, prefetchStyleLinks };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction createHtml(html) {\n  return {\n    __html: html\n  };\n}\n\nexport { createHtml };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { loadRouteModule } from './routeModules.js';\nimport { fetchData, isCatchResponse, extractData, isRedirectResponse } from './data.js';\nimport { CatchValue, TransitionRedirect } from './transition.js';\nimport { prefetchStyleLinks } from './links.js';\nimport invariant from './invariant.js';\n\nfunction createClientRoute(entryRoute, routeModulesCache, Component) {\n  return {\n    caseSensitive: !!entryRoute.caseSensitive,\n    element: /*#__PURE__*/React.createElement(Component, {\n      id: entryRoute.id\n    }),\n    id: entryRoute.id,\n    path: entryRoute.path,\n    index: entryRoute.index,\n    module: entryRoute.module,\n    loader: createLoader(entryRoute, routeModulesCache),\n    action: createAction(entryRoute, routeModulesCache),\n    shouldReload: createShouldReload(entryRoute, routeModulesCache),\n    ErrorBoundary: entryRoute.hasErrorBoundary,\n    CatchBoundary: entryRoute.hasCatchBoundary,\n    hasLoader: entryRoute.hasLoader\n  };\n}\nfunction createClientRoutes(routeManifest, routeModulesCache, Component, parentId) {\n  return Object.keys(routeManifest).filter(key => routeManifest[key].parentId === parentId).map(key => {\n    let route = createClientRoute(routeManifest[key], routeModulesCache, Component);\n    let children = createClientRoutes(routeManifest, routeModulesCache, Component, route.id);\n    if (children.length > 0) route.children = children;\n    return route;\n  });\n}\nfunction createShouldReload(route, routeModules) {\n  let shouldReload = arg => {\n    let module = routeModules[route.id];\n    invariant(module, `Expected route module to be loaded for ${route.id}`);\n    if (module.unstable_shouldReload) {\n      return module.unstable_shouldReload(arg);\n    }\n    return true;\n  };\n  return shouldReload;\n}\nasync function loadRouteModuleWithBlockingLinks(route, routeModules) {\n  let routeModule = await loadRouteModule(route, routeModules);\n  await prefetchStyleLinks(routeModule);\n  return routeModule;\n}\nfunction createLoader(route, routeModules) {\n  let loader = async ({\n    url,\n    signal,\n    submission\n  }) => {\n    if (route.hasLoader) {\n      let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules);\n      try {\n        let result = await fetchData(url, route.id, signal, submission);\n        if (result instanceof Error) throw result;\n        let redirect = await checkRedirect(result);\n        if (redirect) return redirect;\n        if (isCatchResponse(result)) {\n          throw new CatchValue(result.status, result.statusText, await extractData(result));\n        }\n        return extractData(result);\n      } finally {\n        await routeModulePromise;\n      }\n    } else {\n      await loadRouteModuleWithBlockingLinks(route, routeModules);\n    }\n  };\n  return loader;\n}\nfunction createAction(route, routeModules) {\n  let action = async ({\n    url,\n    signal,\n    submission\n  }) => {\n    let routeModulePromise = await loadRouteModuleWithBlockingLinks(route, routeModules);\n    try {\n      if (!route.hasAction) {\n        console.error(`Route \"${route.id}\" does not have an action, but you are trying ` + `to submit to it. To fix this, please add an \\`action\\` function to the route`);\n      }\n      let result = await fetchData(url, route.id, signal, submission);\n      if (result instanceof Error) {\n        throw result;\n      }\n      let redirect = await checkRedirect(result);\n      if (redirect) return redirect;\n      if (isCatchResponse(result)) {\n        throw new CatchValue(result.status, result.statusText, await extractData(result));\n      }\n      return extractData(result);\n    } finally {\n      await routeModulePromise;\n    }\n  };\n  return action;\n}\nasync function checkRedirect(response) {\n  if (isRedirectResponse(response)) {\n    let url = new URL(response.headers.get(\"X-Remix-Redirect\"), window.location.origin);\n    if (url.origin !== window.location.origin) {\n      await new Promise(() => {\n        window.location.replace(url.href);\n      });\n    } else {\n      return new TransitionRedirect(url.pathname + url.search + url.hash, response.headers.get(\"X-Remix-Revalidate\") !== null);\n    }\n  }\n  return null;\n}\n\nexport { createClientRoute, createClientRoutes };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport invariant from './invariant.js';\n\nfunction isCatchResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Catch\") != null;\n}\nfunction isErrorResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Error\") != null;\n}\nfunction isRedirectResponse(response) {\n  return response instanceof Response && response.headers.get(\"X-Remix-Redirect\") != null;\n}\nasync function fetchData(url, routeId, signal, submission) {\n  url.searchParams.set(\"_data\", routeId);\n  let init = submission ? getActionInit(submission, signal) : {\n    credentials: \"same-origin\",\n    signal\n  };\n  let response = await fetch(url.href, init);\n  if (isErrorResponse(response)) {\n    let data = await response.json();\n    let error = new Error(data.message);\n    error.stack = data.stack;\n    return error;\n  }\n  return response;\n}\nasync function extractData(response) {\n  // This same algorithm is used on the server to interpret load\n  // results when we render the HTML page.\n  let contentType = response.headers.get(\"Content-Type\");\n  if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n    return response.json();\n  }\n  return response.text();\n}\nfunction getActionInit(submission, signal) {\n  let {\n    encType,\n    method,\n    formData\n  } = submission;\n  let headers = undefined;\n  let body = formData;\n  if (encType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n    for (let [key, value] of formData) {\n      invariant(typeof value === \"string\", `File inputs are not supported with encType \"application/x-www-form-urlencoded\", please use \"multipart/form-data\" instead.`);\n      body.append(key, value);\n    }\n    headers = {\n      \"Content-Type\": encType\n    };\n  }\n  return {\n    method,\n    body,\n    signal,\n    credentials: \"same-origin\",\n    headers\n  };\n}\n\nexport { extractData, fetchData, isCatchResponse, isErrorResponse, isRedirectResponse };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { matchRoutes } from 'react-router-dom';\n\nfunction matchClientRoutes(routes, location) {\n  let matches = matchRoutes(routes, location);\n  if (!matches) return null;\n  return matches.map(match => ({\n    params: match.params,\n    pathname: match.pathname,\n    route: match.route\n  }));\n}\n\nexport { matchClientRoutes };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { NavigationType } from 'react-router-dom';\nimport { matchClientRoutes } from './routeMatching.js';\nimport invariant from './invariant.js';\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Utils\n////////////////////////////////////////////////////////////////////////////////\n\nclass CatchValue {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText;\n    this.data = data;\n  }\n}\nfunction isActionSubmission(submission) {\n  return [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(submission.method);\n}\nfunction isLoaderSubmission(submission) {\n  return submission.method === \"GET\";\n}\nfunction isRedirectLocation(location) {\n  return Boolean(location.state) && location.state.isRedirect;\n}\nfunction isLoaderRedirectLocation(location) {\n  return isRedirectLocation(location) && location.state.type === \"loader\";\n}\nfunction isActionRedirectLocation(location) {\n  return isRedirectLocation(location) && location.state.type === \"action\";\n}\nfunction isFetchActionRedirect(location) {\n  return isRedirectLocation(location) && location.state.type === \"fetchAction\";\n}\nfunction isLoaderSubmissionRedirectLocation(location) {\n  return isRedirectLocation(location) && location.state.type === \"loaderSubmission\";\n}\nclass TransitionRedirect {\n  constructor(location, setCookie) {\n    this.setCookie = setCookie;\n    this.location = typeof location === \"string\" ? location : location.pathname + location.search;\n  }\n}\nconst IDLE_TRANSITION = {\n  state: \"idle\",\n  submission: undefined,\n  location: undefined,\n  type: \"idle\"\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  type: \"init\",\n  data: undefined,\n  submission: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createTransitionManager\n////////////////////////////////////////////////////////////////////////////////\nfunction createTransitionManager(init) {\n  let {\n    routes\n  } = init;\n  let pendingNavigationController;\n  let fetchControllers = new Map();\n  let incrementingLoadId = 0;\n  let navigationLoadId = -1;\n  let fetchReloadIds = new Map();\n  let fetchRedirectIds = new Set();\n  let subscribers = new Set();\n  let matches = matchClientRoutes(routes, init.location);\n  if (!matches) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the CatchBoundary to take over\n    matches = [{\n      params: {},\n      pathname: \"\",\n      route: routes[0]\n    }];\n  }\n  let state = {\n    location: init.location,\n    loaderData: init.loaderData || {},\n    actionData: init.actionData,\n    catch: init.catch,\n    error: init.error,\n    catchBoundaryId: init.catchBoundaryId || null,\n    errorBoundaryId: init.errorBoundaryId || null,\n    matches,\n    nextMatches: undefined,\n    transition: IDLE_TRANSITION,\n    fetchers: new Map()\n  };\n  function update(updates) {\n    if (updates.transition) {\n      if (updates.transition === IDLE_TRANSITION) {\n        pendingNavigationController = undefined;\n      }\n    }\n    state = Object.assign({}, state, updates);\n    for (let subscriber of subscribers.values()) {\n      subscriber(state);\n    }\n  }\n  function getState() {\n    return state;\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function setFetcher(key, fetcher) {\n    state.fetchers.set(key, fetcher);\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  async function send(event) {\n    switch (event.type) {\n      case \"navigation\":\n        {\n          let {\n            action,\n            location,\n            submission\n          } = event;\n          let matches = matchClientRoutes(routes, location);\n          if (!matches) {\n            matches = [{\n              params: {},\n              pathname: \"\",\n              route: routes[0]\n            }];\n            await handleNotFoundNavigation(location, matches);\n          } else if (!submission && isHashChangeOnly(location)) {\n            await handleHashChange(location, matches);\n          }\n          // back/forward button, treat all as normal navigation\n          else if (action === NavigationType.Pop) {\n            await handleLoad(location, matches);\n          }\n          // <Form method=\"post | put | delete | patch\">\n          else if (submission && isActionSubmission(submission)) {\n            await handleActionSubmissionNavigation(location, submission, matches);\n          }\n          // <Form method=\"get\"/>\n          else if (submission && isLoaderSubmission(submission)) {\n            await handleLoaderSubmissionNavigation(location, submission, matches);\n          }\n          // action=>redirect\n          else if (isActionRedirectLocation(location)) {\n            await handleActionRedirect(location, matches);\n          }\n          // <Form method=\"get\"> --> loader=>redirect\n          else if (isLoaderSubmissionRedirectLocation(location)) {\n            await handleLoaderSubmissionRedirect(location, matches);\n          }\n          // loader=>redirect\n          else if (isLoaderRedirectLocation(location)) {\n            await handleLoaderRedirect(location, matches);\n          }\n          // useSubmission()=>redirect\n          else if (isFetchActionRedirect(location)) {\n            await handleFetchActionRedirect(location, matches);\n          }\n          // <Link>, navigate()\n          else {\n            await handleLoad(location, matches);\n          }\n          navigationLoadId = -1;\n          break;\n        }\n      case \"fetcher\":\n        {\n          if (isServer) {\n            throw new Error(\"a fetcher was called during the server render, but it shouldn't be. \" + \"You are likely calling useFetcher.load() or useFetcher.submit() in \" + \"the body of your component. Try moving it to a useEffect or a callback.\");\n          }\n          let {\n            key,\n            submission,\n            href\n          } = event;\n          let matches = matchClientRoutes(routes, href);\n          invariant(matches, \"No matches found\");\n          if (fetchControllers.has(key)) abortFetcher(key);\n          let match = getRequestMatch(new URL(href, window.location.href), matches);\n          if (submission && isActionSubmission(submission)) {\n            await handleActionFetchSubmission(key, submission, match);\n          } else if (submission && isLoaderSubmission(submission)) {\n            await handleLoaderFetchSubmission(href, key, submission, match);\n          } else {\n            await handleLoaderFetch(href, key, match);\n          }\n          break;\n        }\n      default:\n        {\n          // @ts-ignore\n          throw new Error(`Unknown data event type: ${event.type}`);\n        }\n    }\n  }\n  function dispose() {\n    abortNormalNavigation();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n  function isIndexRequestUrl(url) {\n    for (let param of url.searchParams.getAll(\"index\")) {\n      // only use bare `?index` params without a value\n      // \u2705 /foo?index\n      // \u2705 /foo?index&index=123\n      // \u2705 /foo?index=123&index\n      // \u274C /foo?index=123\n      if (param === \"\") {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Return the correct single match for a route (used for submission\n  // navigations and  and fetchers)\n  // - ?index should try to match the leaf index route\n  // - otherwise it should match the deepest \"path contributing\" match, which\n  //   ignores index and pathless routes\n  function getRequestMatch(url, matches) {\n    let match = matches.slice(-1)[0];\n    if (isIndexRequestUrl(url) && match.route.index) {\n      return match;\n    }\n    return getPathContributingMatches(matches).slice(-1)[0];\n  }\n\n  // Filter index and pathless routes when looking for submission targets\n  function getPathContributingMatches(matches) {\n    return matches.filter((match, index) => index === 0 || !match.route.index && match.route.path && match.route.path.length > 0);\n  }\n  async function handleActionFetchSubmission(key, submission, match) {\n    let currentFetcher = state.fetchers.get(key);\n    let fetcher = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      submission,\n      data: (currentFetcher === null || currentFetcher === void 0 ? void 0 : currentFetcher.data) || undefined\n    };\n    setFetcher(key, fetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n    let controller = new AbortController();\n    fetchControllers.set(key, controller);\n    let result = await callAction(submission, match, controller.signal);\n    if (controller.signal.aborted) {\n      return;\n    }\n    if (isRedirectResult(result)) {\n      let locationState = {\n        isRedirect: true,\n        type: \"fetchAction\",\n        setCookie: result.value.setCookie\n      };\n      fetchRedirectIds.add(key);\n      init.onRedirect(result.value.location, locationState);\n      let loadingFetcher = {\n        state: \"loading\",\n        type: \"actionRedirect\",\n        submission,\n        data: undefined\n      };\n      setFetcher(key, loadingFetcher);\n      update({\n        fetchers: new Map(state.fetchers)\n      });\n      return;\n    }\n    if (maybeBailOnError(match, key, result)) {\n      return;\n    }\n    if (await maybeBailOnCatch(match, key, result)) {\n      return;\n    }\n    let loadFetcher = {\n      state: \"loading\",\n      type: \"actionReload\",\n      data: result.value,\n      submission\n    };\n    setFetcher(key, loadFetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n    let maybeActionErrorResult = isErrorResult(result) ? result : undefined;\n    let maybeActionCatchResult = isCatchResult(result) ? result : undefined;\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let matchesToLoad = state.nextMatches || state.matches;\n    let results = await callLoaders(state, state.transition.location || state.location, matchesToLoad, controller.signal, maybeActionErrorResult, maybeActionCatchResult, submission, match.route.id, loadFetcher);\n    if (controller.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let locationState = {\n        isRedirect: true,\n        type: \"loader\",\n        setCookie: redirect.setCookie\n      };\n      init.onRedirect(redirect.location, locationState);\n      return;\n    }\n    let [error, errorBoundaryId] = findErrorAndBoundaryId(results, state.matches, maybeActionErrorResult);\n    let [catchVal, catchBoundaryId] = (await findCatchAndBoundaryId(results, state.matches, maybeActionCatchResult)) || [];\n    let doneFetcher = {\n      state: \"idle\",\n      type: \"done\",\n      data: result.value,\n      submission: undefined\n    };\n    setFetcher(key, doneFetcher);\n    let abortedKeys = abortStaleFetchLoads(loadId);\n    if (abortedKeys) {\n      markFetchersDone(abortedKeys);\n    }\n    let yeetedNavigation = yeetStaleNavigationLoad(loadId);\n\n    // need to do what we would have done when the navigation load completed\n    if (yeetedNavigation) {\n      let {\n        transition\n      } = state;\n      invariant(transition.state === \"loading\", \"Expected loading transition\");\n      update({\n        location: transition.location,\n        matches: state.nextMatches,\n        error,\n        errorBoundaryId,\n        catch: catchVal,\n        catchBoundaryId,\n        loaderData: makeLoaderData(state, results, matchesToLoad),\n        actionData: transition.type === \"actionReload\" ? state.actionData : undefined,\n        transition: IDLE_TRANSITION,\n        fetchers: new Map(state.fetchers)\n      });\n    }\n\n    // otherwise just update the info for the data\n    else {\n      update({\n        fetchers: new Map(state.fetchers),\n        error,\n        errorBoundaryId,\n        loaderData: makeLoaderData(state, results, matchesToLoad)\n      });\n    }\n  }\n  function yeetStaleNavigationLoad(landedId) {\n    let isLoadingNavigation = state.transition.state === \"loading\";\n    if (isLoadingNavigation && navigationLoadId < landedId) {\n      abortNormalNavigation();\n      return true;\n    }\n    return false;\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        type: \"done\",\n        data: fetcher.data,\n        submission: undefined\n      };\n      setFetcher(key, doneFetcher);\n    }\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    return yeetedKeys.length ? yeetedKeys : false;\n  }\n  async function handleLoaderFetchSubmission(href, key, submission, match) {\n    let currentFetcher = state.fetchers.get(key);\n    let fetcher = {\n      state: \"submitting\",\n      type: \"loaderSubmission\",\n      submission,\n      data: (currentFetcher === null || currentFetcher === void 0 ? void 0 : currentFetcher.data) || undefined\n    };\n    setFetcher(key, fetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n    let controller = new AbortController();\n    fetchControllers.set(key, controller);\n    let result = await callLoader(match, createUrl(href), controller.signal);\n    fetchControllers.delete(key);\n    if (controller.signal.aborted) {\n      return;\n    }\n    if (isRedirectResult(result)) {\n      let locationState = {\n        isRedirect: true,\n        type: \"loader\",\n        setCookie: result.value.setCookie\n      };\n      init.onRedirect(result.value.location, locationState);\n      return;\n    }\n    if (maybeBailOnError(match, key, result)) {\n      return;\n    }\n    if (await maybeBailOnCatch(match, key, result)) {\n      return;\n    }\n    let doneFetcher = {\n      state: \"idle\",\n      type: \"done\",\n      data: result.value,\n      submission: undefined\n    };\n    setFetcher(key, doneFetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  async function handleLoaderFetch(href, key, match) {\n    let currentFetcher = state.fetchers.get(key);\n    let fetcher = {\n      state: \"loading\",\n      type: \"normalLoad\",\n      submission: undefined,\n      data: (currentFetcher === null || currentFetcher === void 0 ? void 0 : currentFetcher.data) || undefined\n    };\n    setFetcher(key, fetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n    let controller = new AbortController();\n    fetchControllers.set(key, controller);\n    let result = await callLoader(match, createUrl(href), controller.signal);\n    if (controller.signal.aborted) return;\n    fetchControllers.delete(key);\n    if (isRedirectResult(result)) {\n      let locationState = {\n        isRedirect: true,\n        type: \"loader\",\n        setCookie: result.value.setCookie\n      };\n      init.onRedirect(result.value.location, locationState);\n      return;\n    }\n    if (maybeBailOnError(match, key, result)) {\n      return;\n    }\n    if (await maybeBailOnCatch(match, key, result)) {\n      return;\n    }\n    let doneFetcher = {\n      state: \"idle\",\n      type: \"done\",\n      data: result.value,\n      submission: undefined\n    };\n    setFetcher(key, doneFetcher);\n    update({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  async function maybeBailOnCatch(match, key, result) {\n    // TODO: revisit this if submission is correct after review\n    if (isCatchResult(result)) {\n      let catchBoundaryId = findNearestCatchBoundary(match, state.matches);\n      state.fetchers.delete(key);\n      update({\n        transition: IDLE_TRANSITION,\n        fetchers: new Map(state.fetchers),\n        catch: {\n          data: result.value.data,\n          status: result.value.status,\n          statusText: result.value.statusText\n        },\n        catchBoundaryId\n      });\n      return true;\n    }\n    return false;\n  }\n  function maybeBailOnError(match, key, result) {\n    if (isErrorResult(result)) {\n      let errorBoundaryId = findNearestBoundary(match, state.matches);\n      state.fetchers.delete(key);\n      update({\n        fetchers: new Map(state.fetchers),\n        error: result.value,\n        errorBoundaryId\n      });\n      return true;\n    }\n    return false;\n  }\n  async function handleNotFoundNavigation(location, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"loading\",\n      type: \"normalLoad\",\n      submission: undefined,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n\n    // Force async so UI code doesn't have to special not found route changes not\n    // skipping the pending state (like scroll restoration gets really\n    // complicated without the pending state, maybe we can figure something else\n    // out later, but this works great.)\n    await Promise.resolve();\n    let catchBoundaryId = findNearestCatchBoundary(matches[0], matches);\n    update({\n      location,\n      matches,\n      catch: {\n        data: null,\n        status: 404,\n        statusText: \"Not Found\"\n      },\n      catchBoundaryId,\n      transition: IDLE_TRANSITION\n    });\n  }\n  async function handleActionSubmissionNavigation(location, submission, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"submitting\",\n      type: \"actionSubmission\",\n      submission,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    let controller = new AbortController();\n    pendingNavigationController = controller;\n\n    // Create a local copy we can mutate for proper determination of the acton\n    // to run on layout/index routes.  We do not want to mutate the eventual\n    // matches used for revalidation\n    let actionMatches = matches;\n    let leafMatch = getRequestMatch(createUrl(submission.action), actionMatches);\n    let result = await callAction(submission, leafMatch, controller.signal);\n    if (controller.signal.aborted) {\n      return;\n    }\n    if (isRedirectResult(result)) {\n      let locationState = {\n        isRedirect: true,\n        type: \"action\",\n        setCookie: result.value.setCookie\n      };\n      init.onRedirect(result.value.location, locationState);\n      return;\n    }\n    let catchVal, catchBoundaryId;\n    if (isCatchResult(result)) {\n      [catchVal, catchBoundaryId] = (await findCatchAndBoundaryId([result], actionMatches, result)) || [];\n    }\n    let loadTransition = {\n      state: \"loading\",\n      type: \"actionReload\",\n      submission,\n      location\n    };\n    update({\n      transition: loadTransition,\n      actionData: {\n        [leafMatch.route.id]: result.value\n      }\n    });\n    await loadPageData(location, matches, submission, leafMatch.route.id, result, catchVal, catchBoundaryId);\n  }\n  async function handleLoaderSubmissionNavigation(location, submission, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"submitting\",\n      type: \"loaderSubmission\",\n      submission,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches, submission);\n  }\n  async function handleHashChange(location, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"loading\",\n      type: \"normalLoad\",\n      submission: undefined,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    // Force async so UI code doesn't have to special case hash changes not\n    // skipping the pending state (like scroll restoration gets really\n    // complicated without the pending state, maybe we can figure something else\n    // out later, but this works great.)\n    await Promise.resolve();\n    update({\n      location,\n      matches,\n      transition: IDLE_TRANSITION\n    });\n  }\n  async function handleLoad(location, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"loading\",\n      type: \"normalLoad\",\n      submission: undefined,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches);\n  }\n  async function handleLoaderRedirect(location, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"loading\",\n      type: \"normalRedirect\",\n      submission: undefined,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches);\n  }\n  async function handleLoaderSubmissionRedirect(location, matches) {\n    abortNormalNavigation();\n    invariant(state.transition.type === \"loaderSubmission\", `Unexpected transition: ${JSON.stringify(state.transition)}`);\n    let {\n      submission\n    } = state.transition;\n    let transition = {\n      state: \"loading\",\n      type: \"loaderSubmissionRedirect\",\n      submission,\n      location: location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches, submission);\n  }\n  async function handleFetchActionRedirect(location, matches) {\n    abortNormalNavigation();\n    let transition = {\n      state: \"loading\",\n      type: \"fetchActionRedirect\",\n      submission: undefined,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches);\n  }\n  async function handleActionRedirect(location, matches) {\n    abortNormalNavigation();\n    invariant(state.transition.type === \"actionSubmission\" ||\n    // loader redirected during action reload\n    state.transition.type === \"actionReload\" ||\n    // loader redirected during action redirect\n    state.transition.type === \"actionRedirect\", `Unexpected transition: ${JSON.stringify(state.transition)}`);\n    let {\n      submission\n    } = state.transition;\n    let transition = {\n      state: \"loading\",\n      type: \"actionRedirect\",\n      submission,\n      location\n    };\n    update({\n      transition,\n      nextMatches: matches\n    });\n    await loadPageData(location, matches, submission);\n  }\n  function isHashChangeOnly(location) {\n    return createHref(state.location) === createHref(location) && state.location.hash !== location.hash;\n  }\n  async function loadPageData(location, matches, submission, submissionRouteId, actionResult, catchVal, catchBoundaryId) {\n    let maybeActionErrorResult = actionResult && isErrorResult(actionResult) ? actionResult : undefined;\n    let maybeActionCatchResult = actionResult && isCatchResult(actionResult) ? actionResult : undefined;\n    let controller = new AbortController();\n    pendingNavigationController = controller;\n    navigationLoadId = ++incrementingLoadId;\n    let results = await callLoaders(state, location, matches, controller.signal, maybeActionErrorResult, maybeActionCatchResult, submission, submissionRouteId, undefined, catchBoundaryId);\n    if (controller.signal.aborted) {\n      return;\n    }\n    let redirect = findRedirect(results);\n    if (redirect) {\n      // loader redirected during an action reload, treat it like an\n      // actionRedirect instead so that all the loaders get called again and the\n      // submission sticks around for optimistic/pending UI.\n      if (state.transition.type === \"actionReload\" || isActionRedirectLocation(location)) {\n        let locationState = {\n          isRedirect: true,\n          type: \"action\",\n          setCookie: redirect.setCookie\n        };\n        init.onRedirect(redirect.location, locationState);\n      } else if (state.transition.type === \"loaderSubmission\") {\n        let locationState = {\n          isRedirect: true,\n          type: \"loaderSubmission\",\n          setCookie: redirect.setCookie\n        };\n        init.onRedirect(redirect.location, locationState);\n      } else {\n        var _location$state;\n        let locationState = {\n          isRedirect: true,\n          type: \"loader\",\n          // If we're in the middle of a setCookie redirect, we need to preserve\n          // the flag so we handle revalidations across multi-redirect scenarios\n          setCookie: redirect.setCookie || ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.setCookie) === true\n        };\n        init.onRedirect(redirect.location, locationState);\n      }\n      return;\n    }\n    let [error, errorBoundaryId] = findErrorAndBoundaryId(results, matches, maybeActionErrorResult);\n    [catchVal, catchBoundaryId] = (await findCatchAndBoundaryId(results, matches, maybeActionErrorResult)) || [catchVal, catchBoundaryId];\n    markFetchRedirectsDone();\n    let abortedIds = abortStaleFetchLoads(navigationLoadId);\n    if (abortedIds) {\n      markFetchersDone(abortedIds);\n    }\n    update({\n      location,\n      matches,\n      error,\n      errorBoundaryId,\n      catch: catchVal,\n      catchBoundaryId,\n      loaderData: makeLoaderData(state, results, matches),\n      actionData: state.transition.type === \"actionReload\" ? state.actionData : undefined,\n      transition: IDLE_TRANSITION,\n      fetchers: abortedIds ? new Map(state.fetchers) : state.fetchers\n    });\n  }\n  function abortNormalNavigation() {\n    if (pendingNavigationController) {\n      pendingNavigationController.abort();\n    }\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.type === \"actionRedirect\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function subscribe(subscriber) {\n    subscribers.add(subscriber);\n    return () => {\n      subscribers.delete(subscriber);\n    };\n  }\n  return {\n    subscribe,\n    send,\n    getState,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    get _internalFetchControllers() {\n      return fetchControllers;\n    }\n  };\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createTransitionManager sub-functions\n////////////////////////////////////////////////////////////////////////////////\nasync function callLoaders(state, location, matches, signal, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId) {\n  let url = createUrl(createHref(location));\n  let matchesToLoad = filterMatchesToLoad(state, location, matches, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId);\n  return Promise.all(matchesToLoad.map(match => callLoader(match, url, signal)));\n}\nasync function callLoader(match, url, signal) {\n  invariant(match.route.loader, `Expected loader for ${match.route.id}`);\n  try {\n    let {\n      params\n    } = match;\n    let value = await match.route.loader({\n      params,\n      url,\n      signal\n    });\n    return {\n      match,\n      value\n    };\n  } catch (error) {\n    return {\n      match,\n      value: error\n    };\n  }\n}\nasync function callAction(submission, match, signal) {\n  try {\n    let value = await match.route.action({\n      url: createUrl(submission.action),\n      params: match.params,\n      submission,\n      signal\n    });\n    return {\n      match,\n      value\n    };\n  } catch (error) {\n    return {\n      match,\n      value: error\n    };\n  }\n}\nfunction filterMatchesToLoad(state, location, matches, actionErrorResult, actionCatchResult, submission, submissionRouteId, fetcher, catchBoundaryId) {\n  var _location$state2;\n  // Filter out all routes below the problematic route as they aren't going\n  // to render so we don't need to load them.\n  if (catchBoundaryId || submissionRouteId && (actionCatchResult || actionErrorResult)) {\n    let foundProblematicRoute = false;\n    matches = matches.filter(match => {\n      if (foundProblematicRoute) {\n        return false;\n      }\n      if (match.route.id === submissionRouteId || match.route.id === catchBoundaryId) {\n        foundProblematicRoute = true;\n        return false;\n      }\n      return true;\n    });\n  }\n  let isNew = (match, index) => {\n    // [a] -> [a, b]\n    if (!state.matches[index]) return true;\n\n    // [a, b] -> [a, c]\n    return match.route.id !== state.matches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    var _state$matches$index$;\n    return (\n      // param change, /users/123 -> /users/456\n      state.matches[index].pathname !== match.pathname ||\n      // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      ((_state$matches$index$ = state.matches[index].route.path) === null || _state$matches$index$ === void 0 ? void 0 : _state$matches$index$.endsWith(\"*\")) && state.matches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n  let url = createUrl(createHref(location));\n  let filterByRouteProps = (match, index) => {\n    if (!match.route.loader) {\n      return false;\n    }\n    if (isNew(match, index) || matchPathChanged(match, index)) {\n      return true;\n    }\n    if (match.route.shouldReload) {\n      let prevUrl = createUrl(createHref(state.location));\n      return match.route.shouldReload({\n        prevUrl,\n        url,\n        submission,\n        params: match.params\n      });\n    }\n    return true;\n  };\n  let isInRootCatchBoundary = state.matches.length === 1;\n  if (isInRootCatchBoundary) {\n    return matches.filter(match => !!match.route.loader);\n  }\n  if ((fetcher === null || fetcher === void 0 ? void 0 : fetcher.type) === \"actionReload\") {\n    return matches.filter(filterByRouteProps);\n  } else if (\n  // mutation, reload for fresh data\n  state.transition.type === \"actionReload\" || state.transition.type === \"actionRedirect\" || state.transition.type === \"fetchActionRedirect\" ||\n  // clicked the same link, resubmitted a GET form\n  createHref(url) === createHref(state.location) ||\n  // search affects all loaders\n  url.searchParams.toString() !== state.location.search.substring(1) || // a cookie was set\n  (_location$state2 = location.state) !== null && _location$state2 !== void 0 && _location$state2.setCookie) {\n    return matches.filter(filterByRouteProps);\n  }\n  return matches.filter((match, index, arr) => {\n    var _location$state3;\n    // don't load errored action route\n    if ((actionErrorResult || actionCatchResult) && arr.length - 1 === index) {\n      return false;\n    }\n    return match.route.loader && (isNew(match, index) || matchPathChanged(match, index) || ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.setCookie));\n  });\n}\nfunction isRedirectResult(result) {\n  return result.value instanceof TransitionRedirect;\n}\nfunction createHref(location) {\n  return location.pathname + location.search;\n}\nfunction findRedirect(results) {\n  for (let result of results) {\n    if (isRedirectResult(result)) {\n      return result.value;\n    }\n  }\n  return null;\n}\nasync function findCatchAndBoundaryId(results, matches, actionCatchResult) {\n  let loaderCatchResult;\n  for (let result of results) {\n    if (isCatchResult(result)) {\n      loaderCatchResult = result;\n      break;\n    }\n  }\n  let extractCatchData = async res => ({\n    status: res.status,\n    statusText: res.statusText,\n    data: res.data\n  });\n\n  // Weird case where action threw, and then a parent loader ALSO threw, we\n  // use the action catch but the loader's nearest boundary (cause we can't\n  // render down to the boundary the action would prefer)\n  if (actionCatchResult && loaderCatchResult) {\n    let boundaryId = findNearestCatchBoundary(loaderCatchResult.match, matches);\n    return [await extractCatchData(actionCatchResult.value), boundaryId];\n  }\n  if (loaderCatchResult) {\n    let boundaryId = findNearestCatchBoundary(loaderCatchResult.match, matches);\n    return [await extractCatchData(loaderCatchResult.value), boundaryId];\n  }\n  return null;\n}\nfunction findErrorAndBoundaryId(results, matches, actionErrorResult) {\n  let loaderErrorResult;\n  for (let result of results) {\n    if (isErrorResult(result)) {\n      loaderErrorResult = result;\n      break;\n    }\n  }\n\n  // Weird case where action errored, and then a parent loader ALSO errored, we\n  // use the action error but the loader's nearest boundary (cause we can't\n  // render down to the boundary the action would prefer)\n  if (actionErrorResult && loaderErrorResult) {\n    let boundaryId = findNearestBoundary(loaderErrorResult.match, matches);\n    return [actionErrorResult.value, boundaryId];\n  }\n  if (actionErrorResult) {\n    let boundaryId = findNearestBoundary(actionErrorResult.match, matches);\n    return [actionErrorResult.value, boundaryId];\n  }\n  if (loaderErrorResult) {\n    let boundaryId = findNearestBoundary(loaderErrorResult.match, matches);\n    return [loaderErrorResult.value, boundaryId];\n  }\n  return [undefined, undefined];\n}\nfunction findNearestCatchBoundary(matchWithError, matches) {\n  let nearestBoundaryId = null;\n  for (let match of matches) {\n    if (match.route.CatchBoundary) {\n      nearestBoundaryId = match.route.id;\n    }\n\n    // only search parents (stop at throwing match)\n    if (match === matchWithError) {\n      break;\n    }\n  }\n  return nearestBoundaryId;\n}\nfunction findNearestBoundary(matchWithError, matches) {\n  let nearestBoundaryId = null;\n  for (let match of matches) {\n    if (match.route.ErrorBoundary) {\n      nearestBoundaryId = match.route.id;\n    }\n\n    // only search parents (stop at throwing match)\n    if (match === matchWithError) {\n      break;\n    }\n  }\n  return nearestBoundaryId;\n}\nfunction makeLoaderData(state, results, matches) {\n  let newData = {};\n  for (let {\n    match,\n    value\n  } of results) {\n    newData[match.route.id] = value;\n  }\n  let loaderData = {};\n  for (let {\n    route\n  } of matches) {\n    let value = newData[route.id] !== undefined ? newData[route.id] : state.loaderData[route.id];\n    if (value !== undefined) {\n      loaderData[route.id] = value;\n    }\n  }\n  return loaderData;\n}\nfunction isCatchResult(result) {\n  return result.value instanceof CatchValue;\n}\nfunction isErrorResult(result) {\n  return result.value instanceof Error;\n}\nfunction createUrl(href) {\n  return new URL(href, window.location.origin);\n}\n//#endregion\n\nexport { CatchValue, IDLE_FETCHER, IDLE_TRANSITION, TransitionRedirect, createTransitionManager };\n", "/**\n * @remix-run/react v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useBeforeUnload, useTransition } from './components.js';\n\nlet STORAGE_KEY = \"positions\";\nlet positions = {};\nif (typeof document !== \"undefined\") {\n  let sessionPositions = sessionStorage.getItem(STORAGE_KEY);\n  if (sessionPositions) {\n    positions = JSON.parse(sessionPositions);\n  }\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n *\n * @see https://remix.run/api/remix#scrollrestoration\n */\nfunction ScrollRestoration(props) {\n  useScrollRestoration();\n\n  // wait for the browser to restore it on its own\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n  }, []);\n\n  // let the browser restore on it's own for refresh\n  useBeforeUnload(React.useCallback(() => {\n    window.history.scrollRestoration = \"auto\";\n  }, []));\n  let restoreScroll = (STORAGE_KEY => {\n    if (!window.history.state || !window.history.state.key) {\n      let key = Math.random().toString(32).slice(2);\n      window.history.replaceState({\n        key\n      }, \"\");\n    }\n    try {\n      let positions = JSON.parse(sessionStorage.getItem(STORAGE_KEY) || \"{}\");\n      let storedY = positions[window.history.state.key];\n      if (typeof storedY === \"number\") {\n        window.scrollTo(0, storedY);\n      }\n    } catch (error) {\n      console.error(error);\n      sessionStorage.removeItem(STORAGE_KEY);\n    }\n  }).toString();\n  return /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)})`\n    }\n  }));\n}\nlet hydrated = false;\nfunction useScrollRestoration() {\n  let location = useLocation();\n  let transition = useTransition();\n  let wasSubmissionRef = React.useRef(false);\n  React.useEffect(() => {\n    if (transition.submission) {\n      wasSubmissionRef.current = true;\n    }\n  }, [transition]);\n  React.useEffect(() => {\n    if (transition.location) {\n      positions[location.key] = window.scrollY;\n    }\n  }, [transition, location]);\n  useBeforeUnload(React.useCallback(() => {\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(positions));\n  }, []));\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line\n    React.useLayoutEffect(() => {\n      // don't do anything on hydration, the component already did this with an\n      // inline script.\n      if (!hydrated) {\n        hydrated = true;\n        return;\n      }\n      let y = positions[location.key];\n\n      // been here before, scroll to it\n      if (y != undefined) {\n        window.scrollTo(0, y);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // don't do anything on submissions\n      if (wasSubmissionRef.current === true) {\n        wasSubmissionRef.current = false;\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location]);\n  }\n  React.useEffect(() => {\n    if (transition.submission) {\n      wasSubmissionRef.current = true;\n    }\n  }, [transition]);\n}\n\nexport { ScrollRestoration };\n", "import React, { createContext } from \"react\";\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: Array<string>;\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n"],
  "mappings": "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",
  "names": ["Action", "PopStateEventType", "createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "invariant", "value", "message", "Error", "createKey", "Math", "random", "toString", "substr", "getHistoryState", "location", "usr", "state", "key", "createLocation", "current", "to", "pathname", "search", "hash", "parsePath", "createPath", "charAt", "path", "parsedPath", "hashIndex", "indexOf", "searchIndex", "createClientSideURL", "base", "window", "origin", "href", "invariant", "URL", "getUrlBasedHistory", "getLocation", "createHref", "validateLocation", "options", "document", "defaultView", "v5Compat", "globalHistory", "history", "action", "Action", "Pop", "listener", "handlePop", "push", "Push", "historyState", "url", "pushState", "error", "assign", "replace", "Replace", "replaceState", "listen", "fn", "Error", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "ResultType", "matchRoutes", "routes", "locationArg", "basename", "location", "parsePath", "pathname", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "parentPath", "flattenRoute", "route", "index", "relativePath", "meta", "undefined", "path", "caseSensitive", "childrenIndex", "startsWith", "invariant", "slice", "joinPaths", "routesMeta", "concat", "children", "push", "score", "computeScore", "forEach", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "replace", "restExploded", "join", "result", "map", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "n", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "assign", "params", "pathnameBase", "normalizePathname", "matchPath", "pattern", "pathname", "path", "caseSensitive", "end", "matcher", "paramNames", "compilePath", "match", "matchedPathname", "pathnameBase", "replace", "captureGroups", "slice", "params", "reduce", "memo", "paramName", "index", "splatValue", "length", "safelyDecodeURIComponent", "warning", "endsWith", "regexpSource", "_", "push", "RegExp", "undefined", "safelyDecodeURI", "value", "decodeURI", "error", "decodeURIComponent", "stripBasename", "basename", "toLowerCase", "startsWith", "startIndex", "nextChar", "charAt", "cond", "message", "console", "warn", "Error", "e", "resolvePath", "to", "fromPathname", "toPathname", "search", "hash", "parsePath", "resolvePathname", "normalizeSearch", "normalizeHash", "relativePath", "segments", "split", "relativeSegments", "forEach", "segment", "pop", "join", "getInvalidPathError", "char", "field", "dest", "JSON", "stringify", "getPathContributingMatches", "matches", "filter", "route", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "invariant", "includes", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "joinPaths", "paths", "join", "replace", "normalizePathname", "pathname", "normalizeSearch", "search", "startsWith", "normalizeHash", "hash", "ErrorResponse", "constructor", "status", "statusText", "data", "internal", "Error", "toString", "error", "isRouteErrorResponse", "e", "validMutationMethodsArr", "validMutationMethods", "Set", "validRequestMethodsArr", "validRequestMethods", "isBrowser", "window", "document", "createElement", "React", "_extends", "React", "isPolyfill", "x", "y", "is", "Object", "useState", "useEffect", "useLayoutEffect", "useDebugValue", "React", "didWarnOld18Alpha", "didWarnUncachedGetSnapshot", "useSyncExternalStore", "subscribe", "getSnapshot", "getServerSnapshot", "console", "error", "value", "cachedValue", "inst", "forceUpdate", "checkIfSnapshotChanged", "handleStoreChange", "latestGetSnapshot", "prevValue", "nextValue", "canUseDOM", "window", "document", "createElement", "isServerEnvironment", "shim", "server", "client", "module", "DataStaticRouterContext", "createContext", "displayName", "DataRouterContext", "DataRouterStateContext", "AwaitContext", "NavigationContext", "LocationContext", "RouteContext", "outlet", "matches", "RouteErrorContext", "useHref", "to", "relative", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "hash", "pathname", "search", "useResolvedPath", "joinedPathname", "joinPaths", "createHref", "useLocation", "location", "useNavigate", "useInRouterContext", "invariant", "basename", "navigator", "useContext", "NavigationContext", "matches", "RouteContext", "pathname", "locationPathname", "useLocation", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "activeRef", "useRef", "React", "useEffect", "current", "navigate", "useCallback", "to", "options", "warning", "go", "path", "resolveTo", "parse", "relative", "joinPaths", "replace", "push", "state", "OutletContext", "createContext", "useOutlet", "context", "outlet", "useContext", "RouteContext", "useResolvedPath", "to", "relative", "matches", "useContext", "RouteContext", "pathname", "locationPathname", "useLocation", "routePathnamesJson", "JSON", "stringify", "getPathContributingMatches", "map", "match", "pathnameBase", "useMemo", "resolveTo", "parse", "useRoutes", "routes", "locationArg", "useInRouterContext", "invariant", "navigator", "NavigationContext", "dataRouterStateContext", "DataRouterStateContext", "parentMatches", "routeMatch", "length", "parentParams", "params", "parentPathname", "parentPathnameBase", "parentRoute", "route", "parentPath", "path", "warningOnce", "endsWith", "locationFromContext", "location", "parsedLocationArg", "parsePath", "startsWith", "remainingPathname", "slice", "matchRoutes", "warning", "search", "hash", "element", "undefined", "renderedMatches", "_renderMatches", "Object", "assign", "joinPaths", "encodeLocation", "_extends", "state", "key", "navigationType", "NavigationType", "Pop", "DefaultErrorElement", "error", "useRouteError", "message", "isRouteErrorResponse", "status", "statusText", "Error", "stack", "lightgrey", "preStyles", "padding", "backgroundColor", "codeStyles", "fontStyle", "RenderErrorBoundary", "Component", "constructor", "props", "getDerivedStateFromError", "getDerivedStateFromProps", "componentDidCatch", "errorInfo", "console", "render", "component", "children", "RenderedRoute", "routeContext", "dataStaticRouterContext", "DataStaticRouterContext", "errorElement", "_deepestRenderedBoundaryId", "id", "dataRouterState", "errors", "errorIndex", "findIndex", "m", "Math", "min", "reduceRight", "outlet", "index", "getChildren", "concat", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterState", "hookName", "state", "useContext", "DataRouterStateContext", "invariant", "getDataRouterConsoleError", "useNavigation", "DataRouterStateHook", "UseNavigation", "navigation", "useMatches", "matches", "loaderData", "useDataRouterState", "DataRouterStateHook", "UseMatches", "useMemo", "map", "match", "pathname", "params", "id", "route", "data", "handle", "useRouteError", "error", "useContext", "RouteErrorContext", "state", "useDataRouterState", "DataRouterStateHook", "UseRouteError", "route", "RouteContext", "thisRoute", "matches", "length", "invariant", "id", "errors", "alreadyWarned", "warningOnce", "key", "cond", "message", "warning", "Outlet", "props", "useOutlet", "context", "Router", "basename", "basenameProp", "children", "location", "locationProp", "navigationType", "NavigationType", "Pop", "navigator", "static", "staticProp", "useInRouterContext", "invariant", "replace", "navigationContext", "useMemo", "parsePath", "pathname", "search", "hash", "state", "key", "trailingPathname", "stripBasename", "warning", "AwaitRenderStatus", "neverSettledPromise", "Promise", "defaultMethod", "defaultEncType", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "getFormSubmissionInfo", "target", "defaultAction", "options", "method", "action", "encType", "formData", "isFormElement", "submissionTrigger", "getAttribute", "defaultMethod", "defaultEncType", "FormData", "name", "append", "value", "isButtonElement", "isInputElement", "type", "form", "Error", "isHtmlElement", "URLSearchParams", "Object", "keys", "protocol", "host", "window", "location", "url", "URL", "HistoryRouter", "basename", "children", "history", "state", "setState", "useState", "action", "location", "React", "useLayoutEffect", "listen", "createElement", "Router", "navigationType", "navigator", "displayName", "Link", "forwardRef", "LinkWithRef", "ref", "onClick", "relative", "reloadDocument", "replace", "target", "to", "preventScrollReset", "rest", "href", "useHref", "internalOnClick", "useLinkClickHandler", "handleClick", "event", "defaultPrevented", "_extends", "NavLink", "NavLinkWithRef", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "path", "useResolvedPath", "useLocation", "routerState", "useContext", "DataRouterStateContext", "NavigationContext", "toPathname", "encodeLocation", "pathname", "locationPathname", "nextLocationPathname", "navigation", "toLowerCase", "isActive", "startsWith", "charAt", "length", "isPending", "ariaCurrent", "undefined", "filter", "Boolean", "join", "Form", "props", "FormImpl", "forwardedRef", "method", "defaultMethod", "onSubmit", "fetcherKey", "routeId", "submit", "useSubmitImpl", "formMethod", "formAction", "useFormAction", "submitHandler", "preventDefault", "submitter", "nativeEvent", "currentTarget", "ScrollRestoration", "getKey", "storageKey", "useScrollRestoration", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "DataRouterContext", "invariant", "useDataRouterState", "replaceProp", "navigate", "useNavigate", "useCallback", "shouldProcessLinkClick", "createPath", "useSubmitImpl", "fetcherKey", "routeId", "router", "useDataRouterContext", "DataRouterHook", "UseSubmitImpl", "defaultAction", "useFormAction", "useCallback", "target", "options", "document", "Error", "method", "encType", "formData", "url", "getFormSubmissionInfo", "href", "pathname", "search", "opts", "replace", "formMethod", "formEncType", "invariant", "fetch", "navigate", "action", "relative", "basename", "useContext", "NavigationContext", "routeContext", "RouteContext", "match", "matches", "slice", "resolvedAction", "path", "_extends", "useResolvedPath", "location", "useLocation", "hash", "route", "index", "params", "URLSearchParams", "delete", "toString", "joinPaths", "createPath", "SCROLL_RESTORATION_STORAGE_KEY", "savedScrollPositions", "useScrollRestoration", "getKey", "storageKey", "router", "useDataRouterContext", "DataRouterHook", "UseScrollRestoration", "restoreScrollPosition", "preventScrollReset", "useDataRouterState", "DataRouterStateHook", "location", "useLocation", "matches", "useMatches", "navigation", "useNavigation", "React", "useEffect", "window", "history", "scrollRestoration", "useBeforeUnload", "useCallback", "state", "key", "scrollY", "sessionStorage", "setItem", "JSON", "stringify", "useLayoutEffect", "sessionPositions", "getItem", "parse", "e", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "hash", "el", "document", "getElementById", "slice", "scrollIntoView", "callback", "addEventListener", "removeEventListener", "React__default", "Component", "invariant", "React", "invariant", "isBrowser", "matches", "invariant", "getPathContributingMatches", "redirect", "Component", "invariant", "redirect", "invariant", "location", "Routes", "Component", "NavLink", "_extends", "Link", "React", "matches", "dedupe", "Form", "FormImpl", "useSubmitImpl", "useFormAction", "defaultMethod", "defaultEncType", "useSubmitImpl", "useFormAction", "isFormElement", "isButtonElement", "isInputElement", "isHtmlElement", "useBeforeUnload", "LiveReload", "React", "ScrollRestoration", "useScrollRestoration", "useBeforeUnload", "STORAGE_KEY", "positions", "_extends", "import_react"]
}
