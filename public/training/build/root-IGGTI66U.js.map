{
  "version": 3,
  "sources": ["../../../app/root.tsx"],
  "sourcesContent": ["import { ChakraProvider } from \"@chakra-ui/react\";\nimport { withEmotionCache } from \"@emotion/react\";\nimport type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport { useContext, useEffect } from \"react\";\nimport { ClientStyleContext, ServerStyleContext } from \"./utils/context\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"New Remix App\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag: any) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    return (\n      <html lang=\"en\">\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(\" \")}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAWA,IAAAA,gBAAsC;AAmC5B;AAhCH,IAAM,OAAqB,OAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AACZ;AAMA,IAAM,WAAW;AAAA,EACf,CAAC,EAAE,SAAS,GAAkB,iBAAiB;AAC7C,UAAM,sBAAkB,0BAAW,kBAAkB;AACrD,UAAM,sBAAkB,0BAAW,kBAAkB;AAGrD,iCAAU,MAAM;AAEd,mBAAa,MAAM,YAAY,SAAS;AAExC,YAAM,OAAO,aAAa,MAAM;AAChC,mBAAa,MAAM,MAAM;AACzB,WAAK,QAAQ,CAAC,QAAa;AACzB,QAAC,aAAa,MAAc,WAAW,GAAG;AAAA,MAC5C,CAAC;AAED,yDAAiB;AAAA,IACnB,GAAG,CAAC,CAAC;AAEL,WACE,mDAAC,UAAK,MAAK,MACT;AAAA,yDAAC,UACC;AAAA,2DAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAM;AAAA,QACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,eAAO;AAAA,QACN,mDAAiB,IAAI,CAAC,EAAE,KAAK,KAAK,IAAI,MACrC;AAAA,UAAC;AAAA;AAAA,YAEC,gBAAc,GAAG,OAAO,IAAI,KAAK,GAAG;AAAA,YACpC,yBAAyB,EAAE,QAAQ,IAAI;AAAA;AAAA,UAFlC;AAAA,UADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA;AAAA,WARJ;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,MACA,mDAAC,UACE;AAAA;AAAA,QACD,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,eAAmB;AAAA,QACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,eAAS;AAAA,QACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,WAJd;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,EAEJ;AACF;AAEe,SAAR,MAAuB;AAC5B,SACE,mDAAC,YACC,6DAAC,kBACC,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,SAAQ,KADV;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;",
  "names": ["import_react"]
}
